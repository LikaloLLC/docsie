#!/usr/bin/env python3
"""
Clean up any remaining files from disabled languages that might have been 
generated by build scripts before they were updated.
"""

import os
import shutil
import yaml
from pathlib import Path

def load_enabled_languages():
    """Load only enabled languages from translation_config.yaml"""
    config_file = Path('translation_config.yaml')
    if not config_file.exists():
        print("‚ùå translation_config.yaml not found!")
        return []
    
    with open(config_file, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    enabled_languages = []
    for code, lang_config in config.get('languages', {}).items():
        if lang_config.get('enabled', False):
            # Handle special case for Japanese
            if code == 'ja':
                enabled_languages.append('jp')
            else:
                enabled_languages.append(code)
    
    return enabled_languages

def cleanup_disabled_languages():
    """Remove any directories for disabled languages"""
    print("üßπ Cleaning up disabled language directories...")
    
    # Get enabled languages
    enabled_languages = load_enabled_languages()
    enabled_languages.append('en')  # Always keep English
    
    print(f"Enabled languages: {', '.join(sorted(enabled_languages))}")
    
    # Get all top-level directories
    removed_count = 0
    for item in os.listdir('.'):
        if os.path.isdir(item) and len(item) == 2:  # Language codes are 2 chars
            # Check if it looks like a language directory
            index_path = os.path.join(item, 'index.html')
            if os.path.exists(index_path):
                # This is likely a language directory
                if item not in enabled_languages:
                    print(f"  Removing disabled language directory: {item}/")
                    try:
                        shutil.rmtree(item)
                        removed_count += 1
                    except Exception as e:
                        print(f"  ‚ùå Error removing {item}: {e}")
    
    print(f"\n‚úÖ Removed {removed_count} disabled language directories")
    
    # Also check for any stray asset directories in language folders
    print("\nüîç Checking for stray asset directories in enabled languages...")
    for lang in enabled_languages:
        if lang == 'en':
            continue
            
        assets_dir = os.path.join(lang, 'assets')
        styles_dir = os.path.join(lang, 'styles') 
        
        if os.path.exists(assets_dir):
            print(f"  Found assets in {lang}/, removing...")
            shutil.rmtree(assets_dir)
            
        # Note: We keep styles/ directory as it may contain language-specific styles

if __name__ == "__main__":
    cleanup_disabled_languages()