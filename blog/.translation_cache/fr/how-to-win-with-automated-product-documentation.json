{
    "__metadata__": {
        "original_categories": [
            "Product Documentation",
            "Product Management",
            "Documentation Portals",
            "Best Practices",
            "Technical Writing",
            "Product Documentation Tutorials"
        ],
        "author_name": "Tal F.",
        "author_email": "tal@docsie.io",
        "author_info": "VP of Customer Success @ Docsie.io",
        "author_image": " https://cdn.docsie.io/user_profiles/15/logo_logo_QmXrbijvL0L2hFKNm6Q25DtjahujKdB6nu4pqBlLBgvtT.png",
        "header_image": "https://cdn.docsie.io/workspace_PfNzfGj3YfKKtTO4T/doc_JLDSpWBDcIaMWR3Ce/file_0BrpyHBgOFHjSp8Mh/b0948059-61bb-c65e-5ba3-77ac6a3b7a7eimage.png",
        "timestamp": "2023-01-07T22:27:03+00:00",
        "status": 1
    },
    "how-to-win-with-automated-product-docume|title": "Comment gagner avec la documentation produit automatisée",
    "how-to-win-with-automated-product-docume|summary": "Les entreprises peuvent innover dans le processus central de diffusion d'informations à toutes les parties prenantes d'une manière très spécifique – pour que les nouvelles initiatives et produits obtiennent la visibilité dont ils ont besoin, et que tout le monde soit sur la même longueur d'onde.",
    "how-to-win-with-automated-product-docume|markdown": "# Docsie : la puissance des outils de documentation polyvalents\n\nChez Docsie, nous vous apportons des outils de documentation polyvalents et performants. Les entreprises peuvent innover dans le processus central de transmission d'informations à chaque partie prenante d'une manière spécifique – pour que les nouvelles initiatives et produits obtiennent la visibilité nécessaire et que tout le monde soit sur la même longueur d'onde.\n\n### Organisation et conception de tableaux de bord visuels\n\n![](https://cdn.docsie.io/workspace_PfNzfGj3YfKKtTO4T/doc_JLDSpWBDcIaMWR3Ce/file_KcRBWUiCJ0UoEUOKC/f86c49a8-1b13-5d38-2fbe-f671f02cfaecmaxim_ilyahov_blf4r69ltgw_unsplash.jpg)\n\nLa plateforme Docsie fonctionne sur le principe de diffusion de la documentation produit et du contenu vers ses environnements utilisateurs finaux de manière centralisée et organisée. Une grande partie du monde du développement logiciel actuel s'articule autour de cette approche de tableau de bord visuel, où le format et l'interface intuitive sont primordiaux.\n\nAvec une interface cloud de qualité, il devient facile d'unifier votre documentation produit, de surmonter la courbe d'apprentissage et de publier votre contenu sur le web – de façon fluide et sans effort. Ce modèle cloud est très utile – c'est pour cette raison que les services cloud ont conquis si rapidement et complètement le monde des affaires du XXIe siècle. Mais il faut que ce soit bien configuré !\n\n### Livres virtuels et étagères virtuelles\n\nVoici un autre composant de cette organisation virtuelle qui alimente les processus de documentation produit de [Docsie](https://www.docsie.io/).\n\nDans notre interface, vous verrez des [étagères virtuelles contenant un nombre précis de livres virtuels](https://portals.docsie.io/docsie/docsie-documentation/using-docsie/?doc=/using-docsie-library/moving-and-copying-documents/) qui hébergent votre contenu et documentation, ainsi que les outils pour déplacer les éléments grâce à des automatisations clés.\n\nCette [approche orientée objet](https://dl.acm.org/doi/10.1145/3290605.3300921) fait partie de la façon dont nous aidons nos clients à intégrer rapidement et efficacement leur personnel, avec un système que chacun peut apprendre à utiliser en toute confiance. On pourrait le considérer comme le \"Github de la documentation\" – à bien des égards, c'est ce même processus de construction d'un contexte pour l'information qui est populaire, facile à comprendre, puis universellement adopté.\n\n### Outils collaboratifs\n\n![](https://cdn.docsie.io/workspace_PfNzfGj3YfKKtTO4T/doc_JLDSpWBDcIaMWR3Ce/file_9A6GNIUeIDG1bUZID/bf6dc944-2db5-e845-f946-37c7e99ee813marvin_meyer_syto3xs06fu_unsplash.jpg)\n\nDans tout processus de contenu, il y a généralement plusieurs parties prenantes – personnes et entités travaillant ensemble pour acheminer les bonnes informations vers la bonne destination.\n\nC'est aussi un aspect essentiel du fonctionnement de Docsie et de la conception réfléchie de notre plateforme. Grâce aux processus de flux de travail documentaire de notre modèle, il devient plus facile de voir ce que fait chaque participant au sein d'une chaîne collaborative.\n\n### Les automatisations de publication rendent le contenu portable\n\nLes automatisations [JavaScript](https://www.javascript.com/) sur lesquelles nous avons construit Docsie illustrent parfaitement comment les outils de documentation API et les ressources associées permettent aux clients de publier n'importe où, au lieu d'être confinés à un silo WordPress isolé ou autre destination fermée. Cette polyvalence est au cœur de la façon dont un système unifié de documentation et de contenu diffuse ses produits au monde – comment vous faites passer les éléments de l'état d'ébauche ou de bêta à la phase de production complète.\n\nVous souhaitez en savoir plus sur Docsie ? Essayez l'une de nos démos ou contactez un technicien pour obtenir plus d'informations sur ce que ce type de plateforme peut apporter à votre entreprise. Vous verrez ce principe de transparence et de flux de travail documentaire sans friction à l'œuvre, aidant les utilisateurs à gagner en efficacité et à devancer la concurrence.",
    "how-to-win-with-automated-product-docume|category|0": "Documentation du produit",
    "how-to-win-with-automated-product-docume|category|1": "Gestion de produit",
    "how-to-win-with-automated-product-docume|category|2": "Portails de documentation",
    "how-to-win-with-automated-product-docume|category|3": "Meilleures pratiques",
    "how-to-win-with-automated-product-docume|category|4": "Rédaction technique",
    "how-to-win-with-automated-product-docume|category|5": "Documentation des produits Tutoriels",
    "how-to-win-with-automated-product-docume|related_title|0": "5 raisons pour lesquelles Docsie est l'outil indispensable pour la gestion moderne des connaissances",
    "how-to-win-with-automated-product-docume|related_explanation|0": "Les deux articles traitent du flux de travail de la documentation et de la documentation d'API.",
    "how-to-win-with-automated-product-docume|related_title|1": "Comment rédiger une documentation technique exceptionnelle",
    "how-to-win-with-automated-product-docume|related_explanation|1": "Les deux articles couvrent les parties prenantes et la documentation API\n\u0000# frontend/src/pages/auth/ForgotPassword.tsx\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useNavigate } from 'react-router-dom';\nimport { useResetPassword } from '@/hooks';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\nimport { useCallback } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader } from '@/components/Loader';\nimport { useStepper } from '@/components/ui/stepper';\nimport { SendHorizontalIcon } from 'lucide-react';\n\nconst FormSchema = z.object({\n  email: z.string().email({\n    message: 'Please enter a valid email address.',\n  }),\n});\n\nexport function ForgotPassword() {\n  const navigate = useNavigate();\n  const resetPassword = useResetPassword();\n\n  const { currentStep } = useStepper();\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      email: '',\n    },\n  });\n\n  const onSubmit = useCallback(\n    (data: z.infer<typeof FormSchema>) => {\n      resetPassword.mutate(data);\n    },\n    [resetPassword]\n  );\n\n  if (resetPassword.isSuccess) {\n    setTimeout(() => {\n      navigate('/signin');\n    }, 4000);\n  }\n\n  return (\n    <div className='container relative flex-col justify-center items-center md:grid lg:max-w-none lg:grid-cols-1 lg:px-0'>\n      <Card className='max-w-md w-full'>\n        <CardHeader>\n          <CardTitle className='text-xl'>Reset Your Password</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {currentStep === 0 && (\n            <>\n              {resetPassword.isError && (\n                <div className='text-red-500 text-sm my-2'>\n                  {\n                    // @ts-ignore\n                    resetPassword.error?.response?.data?.message\n                  }\n                </div>\n              )}\n              {resetPassword.isSuccess && (\n                <div className='text-green-500 text-sm my-2'>\n                  Reset password link sent to your email. Redirecting to sign in\n                  page...\n                </div>\n              )}\n              <Form {...form}>\n                <form\n                  onSubmit={form.handleSubmit(onSubmit)}\n                  className='w-full space-y-6'\n                >\n                  <FormField\n                    control={form.control}\n                    name='email'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder='Enter your email'\n                            type='email'\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button\n                    type='submit'\n                    className='w-full flex gap-2'\n                    disabled={resetPassword.isPending}\n                  >\n                    {resetPassword.isPending ? (\n                      <Loader /> // Show loader while the request is in progress\n                    ) : (\n                      <>\n                        <SendHorizontalIcon className='h-4 w-4' />\n                        Send Reset Link\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { useState, useEffect } from 'react';\n\nimport { UserColumns } from './columns';\nimport { DataTable } from '@/components/data-table';\nimport {\n  DeleteIcon,\n  HelpCircleIcon,\n  PlusCircle,\n  UserPlus,\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useDeleteUser, useGetUsers, useUpdateUserRoleAdmin } from '@/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Loader } from '@/components/Loader';\nimport { AddUserDialog } from '@/components/dialogs/add-user-dialog';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/ui/hover-card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { toast } from 'sonner';\n\nfunction UsersPage() {\n  const { user } = useAuth();\n  const deleteUser = useDeleteUser();\n  const updateUserRole = useUpdateUserRoleAdmin();\n  const [addUserOpen, setAddUserOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [userToDelete, setUserToDelete] = useState<string | null>(null);\n  const [userToEdit, setUserToEdit] = useState<\n    | {\n        id: string;\n        email: string;\n        role: string;\n      }\n    | null\n  >(null);\n\n  const {\n    data: users,\n    isError,\n    refetch,\n    isLoading,\n  } = useGetUsers({\n    enabled: true,\n  });\n\n  useEffect(() => {\n    if (deleteUser.isSuccess) {\n      toast.success('User deleted successfully');\n      refetch();\n    }\n  }, [deleteUser.isSuccess, refetch]);\n\n  useEffect(() => {\n    if (updateUserRole.isSuccess) {\n      toast.success('User role updated successfully');\n      refetch();\n    }\n  }, [updateUserRole.isSuccess, refetch]);\n\n  // Effect to close delete dialog when delete is successful\n  useEffect(() => {\n    if (deleteUser.isSuccess) {\n      setDeleteDialogOpen(false);\n      setUserToDelete(null);\n    }\n  }, [deleteUser.isSuccess]);\n\n  const handleDeleteUser = (userId: string) => {\n    setUserToDelete(userId);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (userToDelete) {\n      deleteUser.mutate(userToDelete);\n    }\n  };\n\n  const handleRoleChange = (value: string) => {\n    if (userToEdit) {\n      updateUserRole.mutate({\n        userId: userToEdit.id,\n        role: value,\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className='h-full flex items-center justify-center'>\n        <Loader size='lg' />\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className='h-full flex items-center justify-center'>\n        <div className='text-center'>\n          <h2 className='text-2xl font-bold mb-2'>Something went wrong</h2>\n          <p className='text-muted-foreground'>\n            Could not load users. Please try again later.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const isAdmin = user?.role === 'admin';\n\n  return (\n    <div className='h-full flex flex-col space-y-4'>\n      <Card>\n        <CardHeader>\n          <div className='flex items-center justify-between'>\n            <div>\n              <CardTitle className='text-2xl'>Users Management</CardTitle>\n              <CardDescription>\n                View and manage all users in the system\n              </CardDescription>\n            </div>\n            <div className='flex items-center gap-2'>\n              <div className='flex items-center gap-1'>\n                <Badge\n                  variant='outline'\n                  className='flex items-center gap-1 bg-blue-100'\n                >\n                  <div className='h-2 w-2 rounded-full bg-blue-500'></div>\n                  Admin\n                </Badge>\n                <Badge\n                  variant='outline'\n                  className='flex items-center gap-1 bg-green-100'\n                >\n                  <div className='h-2 w-2 rounded-full bg-green-500'></div>\n                  User\n                </Badge>\n              </div>\n              {isAdmin && (\n                <Button\n                  onClick={() => setAddUserOpen(true)}\n                  className='flex items-center gap-2'\n                >\n                  <UserPlus className='h-4 w-4' />\n                  <span className='hidden md:block'>Add User</span>\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <DataTable\n            data={users || []}\n            columns={UserColumns}\n            filterColumn='email'\n            actionColumn={(row) => (\n              <div className='flex items-center gap-2'>\n                {isAdmin && (\n                  <>\n                    <Button\n                      variant='ghost'\n                      size='icon'\n                      onClick={() => {\n                        setUserToEdit({\n                          id: row.id,\n                          email: row.email,\n                          role: row.role,\n                        });\n                        // Open a dropdown to select the role\n                      }}\n                    >\n                      <HoverCard>\n                        <HoverCardTrigger asChild>\n                          <div className='cursor-pointer flex items-center'>\n                            <div\n                              className={`h-2.5 w-2.5 rounded-full mr-2 ${\n                                row.role === 'admin'\n                                  ? 'bg-blue-500'\n                                  : 'bg-green-500'\n                              }`}\n                            ></div>\n                            {row.role === 'admin' ? 'Admin' : 'User'}\n                          </div>\n                        </HoverCardTrigger>\n                        <HoverCardContent className='w-80'>\n                          <div className='flex justify-between space-x-4'>\n                            <div className='space-y-1'>\n                              <h4 className='text-sm font-semibold'>\n                                Change User Role\n                              </h4>\n                              <Select\n                                value={\n                                  userToEdit?.id === row.id\n                                    ? userToEdit.role\n                                    : row.role\n                                }\n                                onValueChange={handleRoleChange}\n                              >\n                                <SelectTrigger className='w-[180px]'>\n                                  <SelectValue placeholder='Select a role' />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value='admin'>Admin</SelectItem>\n                                  <SelectItem value='user'>User</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                        </HoverCardContent>\n                      </HoverCard>\n                    </Button>\n\n                    <AlertDialog\n                      open={deleteDialogOpen && userToDelete === row.id}\n                      onOpenChange={setDeleteDialogOpen}\n                    >\n                      <AlertDialogTrigger asChild>\n                        <Button\n                          variant='destructive'\n                          size='icon'\n                          disabled={row.id === user?.id}\n                          onClick={() => handleDeleteUser(row.id)}\n                        >\n                          <DeleteIcon className='h-4 w-4' />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>\n                            Are you absolutely sure?\n                          </AlertDialogTitle>\n                          <AlertDialogDescription>\n                            This action cannot be undone. This will permanently\n                            delete the user account and all associated data.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={confirmDelete}\n                            className='bg-destructive text-destructive-foreground'\n                          >\n                            {deleteUser.isPending ? (\n                              <Loader className='mr-2' />\n                            ) : (\n                              <DeleteIcon className='mr-2 h-4 w-4' />\n                            )}\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </>\n                )}\n                {!isAdmin && row.role === 'admin' && (\n                  <HoverCard>\n                    <HoverCardTrigger asChild>\n                      <div className='cursor-pointer flex items-center'>\n                        <div className='h-2.5 w-2.5 rounded-full mr-2 bg-blue-500'></div>\n                        Admin\n                        <HelpCircleIcon className='h-4 w-4 ml-1 text-muted-foreground' />\n                      </div>\n                    </HoverCardTrigger>\n                    <HoverCardContent className='w-80'>\n                      <div className='flex justify-between space-x-4'>\n                        <div className='space-y-1'>\n                          <h4 className='text-sm font-semibold'>Admin User</h4>\n                          <p className='text-sm text-muted-foreground'>\n                            Only admins can change user roles or delete users.\n                          </p>\n                        </div>\n                      </div>\n                    </HoverCardContent>\n                  </HoverCard>\n                )}\n              </div>\n            )}\n          />\n        </CardContent>\n      </Card>\n\n      <AddUserDialog open={addUserOpen} setOpen={setAddUserOpen} />\n    </div>\n  );\n}\n\nexport default UsersPage;\n\u0005End File\u0006import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CalendarIcon, CheckCircle2, Clock, ListChecks } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { useGetBoards } from '@/hooks';\nimport { useGetAuditLogs } from '@/hooks/useGetAuditLogs';\nimport { Activity } from './activity';\nimport { Metrics } from './metrics';\nimport { FormattedDate } from '@/lib/formatted-date';\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  const { data: boards, isLoading: boardsLoading } = useGetBoards();\n  const { data: auditLogs, isLoading: logsLoading } = useGetAuditLogs();\n\n  const recentBoards = boards?.slice(0, 3) || [];\n  const recentActivity = auditLogs?.slice(0, 5) || [];\n\n  return (\n    <div className='flex flex-col gap-5 md:gap-5'>\n      <div className='flex flex-col gap-2'>\n        <h2 className='text-3xl font-bold tracking-tight'>\n          Welcome back, {user?.name || user?.email}!\n        </h2>\n        <p className='text-muted-foreground'>\n          Here's what's happening with your projects\n        </p>\n      </div>\n\n      <Metrics />\n\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n        <Card className='col-span-1'>\n          <CardHeader>\n            <CardTitle className='flex items-center gap-2'>\n              <ListChecks className='h-5 w-5' />\n              Recent Boards\n            </CardTitle>\n            <CardDescription>\n              Your recently created or modified boards\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {boardsLoading ? (\n              <div className='space-y-3'>\n                {Array(3)\n                  .fill(0)\n                  .map((_, i) => (\n                    <Skeleton key={i} className='h-20 w-full' />\n                  ))}\n              </div>\n            ) : recentBoards.length === 0 ? (\n              <div className='text-center py-5'>\n                <p className='text-muted-foreground'>No boards yet</p>\n              </div>\n            ) : (\n              <div className='space-y-3'>\n                {recentBoards.map((board) => (\n                  <Link\n                    key={board.id}\n                    to={`/board/${board.id}`}\n                    className='block'\n                  >\n                    <div className='rounded-lg border p-3 hover:bg-accent transition'>\n                      <div className='flex justify-between items-start mb-2'>\n                        <div className='font-medium truncate'>\n                          {board.title}\n                        </div>\n                        <Badge\n                          variant={\n                            board.visibility === 'private'\n                              ? 'secondary'\n                              : 'outline'\n                          }\n                          className='ml-2 text-xs'\n                        >\n                          {board.visibility}\n                        </Badge>\n                      </div>\n                      <div className='flex items-center gap-2 text-xs text-muted-foreground'>\n                        <CalendarIcon className='h-3 w-3' />\n                        <span>\n                          Created{' '}\n                          {formatDistanceToNow(new Date(board.createdAt), {\n                            addSuffix: true,\n                          })}\n                        </span>\n                      </div>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            )}\n          </CardContent>\n          <CardFooter>\n            <Button size='sm' variant='outline' asChild className='w-full'>\n              <Link to='/board'>View all boards</Link>\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card className='col-span-1 md:col-span-2'>\n          <CardHeader>\n            <CardTitle className='flex items-center gap-2'>\n              <Clock className='h-5 w-5' />\n              Recent Activity\n            </CardTitle>\n            <CardDescription>\n              Latest actions and updates across your boards\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {logsLoading ? (\n              <div className='space-y-4'>\n                {Array(5)\n                  .fill(0)\n                  .map((_, i) => (\n                    <Skeleton key={i} className='h-12 w-full' />\n                  ))}\n              </div>\n            ) : recentActivity.length === 0 ? (\n              <div className='text-center py-5'>\n                <p className='text-muted-foreground'>No recent activity</p>\n              </div>\n            ) : (\n              <div className='space-y-4'>\n                {recentActivity.map((log) => (\n                  <Activity\n                    key={log.id}\n                    action={log.action}\n                    entity={log.entity}\n                    entityId={log.entityId}\n                    entityTitle={log.entityTitle}\n                    createdAt={log.createdAt}\n                    user={{\n                      id: log.userId,\n                      name: log.userName || log.userEmail,\n                      email: log.userEmail,\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n          </CardContent>\n          <CardFooter className='flex items-center justify-between'>\n            <div className='text-xs text-muted-foreground'>\n              <FormattedDate className='text-xs' date={new Date()} />\n            </div>\n            <Button variant='ghost' size='sm' className='gap-1'>\n              <CheckCircle2 className='h-3.5 w-3.5' />\n              <span>All caught up!</span>\n            </Button>\n          </CardFooter>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { CalendarDays, CheckCircle, ListChecks, Users } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  useGetBoardMetrics,\n  useGetCardMetrics,\n  useGetListMetrics,\n  useGetUsers,\n} from '@/hooks';\nimport { Progress } from '@/components/ui/progress';\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  description?: string;\n  loading?: boolean;\n  progress?: number;\n}\n\nfunction MetricCard({\n  title,\n  value,\n  icon,\n  description,\n  loading,\n  progress,\n}: MetricCardProps) {\n  return (\n    <Card>\n      <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\n        <CardTitle className='text-sm font-medium'>{title}</CardTitle>\n        {icon}\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <Skeleton className='h-8 w-3/4' />\n        ) : (\n          <>\n            <div className='text-2xl font-bold'>{value}</div>\n            {description && (\n              <p className='text-xs text-muted-foreground'>{description}</p>\n            )}\n            {progress !== undefined && (\n              <div className='mt-2 space-y-1'>\n                <Progress value={progress} className='h-2' />\n                <div className='text-xs text-muted-foreground'>\n                  {progress}% completion rate\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function Metrics() {\n  const { data: boardsMetrics, isLoading: boardsLoading } = useGetBoardMetrics();\n  const { data: listsMetrics, isLoading: listsLoading } = useGetListMetrics();\n  const { data: cardsMetrics, isLoading: cardsLoading } = useGetCardMetrics();\n  const { data: users, isLoading: usersLoading } = useGetUsers();\n\n  // Calculate completion rate (% of cards marked as done)\n  const completionRate = cardsMetrics\n    ? Math.round((cardsMetrics.completedCards / cardsMetrics.totalCards) * 100) || 0\n    : 0;\n\n  return (\n    <div className='grid gap-4 md:grid-cols-2 lg:grid-cols-4'>\n      <MetricCard\n        title='Total Boards'\n        value={boardsMetrics?.totalBoards || 0}\n        description={\n          boardsMetrics\n            ? `${boardsMetrics.privateBoards} private, ${boardsMetrics.publicBoards} public`\n            : ''\n        }\n        icon={<ListChecks className='h-4 w-4 text-muted-foreground' />}\n        loading={boardsLoading}\n      />\n      <MetricCard\n        title='Active Lists'\n        value={listsMetrics?.totalLists || 0}\n        description={\n          listsMetrics\n            ? `Across ${listsMetrics.boardsWithLists} boards`\n            : ''\n        }\n        icon={<CalendarDays className='h-4 w-4 text-muted-foreground' />}\n        loading={listsLoading}\n      />\n      <MetricCard\n        title='Total Cards'\n        value={cardsMetrics?.totalCards || 0}\n        icon={<CheckCircle className='h-4 w-4 text-muted-foreground' />}\n        loading={cardsLoading}\n        progress={completionRate}\n      />\n      <MetricCard\n        title='Team Members'\n        value={users?.length || 0}\n        description={\n          users\n            ? `${users.filter((u) => u.role === 'admin').length} administrators`\n            : ''\n        }\n        icon={<Users className='h-4 w-4 text-muted-foreground' />}\n        loading={usersLoading}\n      />\n    </div>\n  );\n}\n\u0005End File\u0006import { useWindowWidth } from '@react-hook/window-size';\nimport { ClipboardList, Globe, Lock, User, Users } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\n\ntype ActivityProps = {\n  action: string;\n  entity: string;\n  entityId: string;\n  entityTitle: string;\n  createdAt: string;\n  user: {\n    id: string;\n    name?: string;\n    email: string;\n    imageUrl?: string;\n  };\n};\n\nexport function Activity({\n  action,\n  entity,\n  entityId,\n  entityTitle,\n  createdAt,\n  user,\n}: ActivityProps) {\n  const width = useWindowWidth();\n  const isMobile = width < 640;\n\n  // Get entity icon\n  const getEntityIcon = () => {\n    switch (entity) {\n      case 'board':\n        return <ClipboardList className='h-4 w-4' />;\n      case 'list':\n        return <Users className='h-4 w-4' />;\n      case 'card':\n        return <User className='h-4 w-4' />;\n      default:\n        return null;\n    }\n  };\n\n  // Get action color\n  const getActionColor = () => {\n    switch (action) {\n      case 'created':\n        return 'bg-green-500';\n      case 'updated':\n        return 'bg-blue-500';\n      case 'deleted':\n        return 'bg-red-500';\n      case 'completed':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  // Format the timestamp\n  const formattedTime = formatDistanceToNow(new Date(createdAt), {\n    addSuffix: true,\n  });\n\n  // Get initials for avatar\n  const getInitials = () => {\n    if (user.name) {\n      return user.name\n        .split(' ')\n        .map((n) => n[0])\n        .join('')\n        .toUpperCase();\n    }\n    return user.email.substring(0, 2).toUpperCase();\n  };\n\n  // Determine the route link\n  const getRouteLink = () => {\n    if (entity === 'board') return `/board/${entityId}`;\n    // For card and list, we need to link to the board\n    if (entity === 'card' || entity === 'list') {\n      // Extract board ID from entity ID (this depends on your ID format)\n      const boardId = entityId.split('-')[0]; // Assuming format like \"boardId-listId-cardId\"\n      return `/board/${boardId}`;\n    }\n    return '#';\n  };\n\n  // Get visible entity title (truncated for mobile)\n  const getVisibleEntityTitle = () => {\n    if (!entityTitle) return '[Deleted item]';\n    return isMobile && entityTitle.length > 15\n      ? entityTitle.substring(0, 15) + '...'\n      : entityTitle;\n  };\n\n  return (\n    <div className='flex items-start space-x-4 rounded-lg p-3 transition-colors hover:bg-muted/50'>\n      <Avatar className='h-8 w-8'>\n        <AvatarImage src={user.imageUrl} alt={user.name || user.email} />\n        <AvatarFallback>{getInitials()}</AvatarFallback>\n      </Avatar>\n\n      <div className='flex-1 space-y-1'>\n        <div className='flex items-center'>\n          <p className='text-sm font-medium leading-none'>\n            <span className='mr-1'>{user.name || user.email}</span>\n          </p>\n          <Badge\n            variant='outline'\n            className={cn(\n              'ml-2 px-1.5 py-0.5 text-xs font-normal',\n              getActionColor()\n            )}\n          >\n            {action}\n          </Badge>\n        </div>\n\n        <div className='text-sm text-muted-foreground flex items-center gap-1 flex-wrap'>\n          <span>\n            {action === 'deleted' ? 'a' : action === 'completed' ? 'a' : 'the'}\n          </span>\n          <span className='inline-flex items-center gap-1'>\n            {getEntityIcon()}\n            {entity}\n          </span>\n          {action !== 'deleted' && (\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Link\n                  to={getRouteLink()}\n                  className='inline-flex items-center text-primary hover:underline'\n                >\n                  <span>{getVisibleEntityTitle()}</span>\n                </Link>\n              </TooltipTrigger>\n              {entityTitle && entityTitle.length > 15 && (\n                <TooltipContent>{entityTitle}</TooltipContent>\n              )}\n            </Tooltip>\n          )}\n          <span className='ml-auto text-xs text-muted-foreground'>\n            {formattedTime}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\u0005End File\u0006# frontend/src/pages/BoardPage.tsx\nimport { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable } from '@hello-pangea/dnd';\nimport { toast } from 'sonner';\n\nimport { ListWithCards } from '@/types';\nimport { useAction } from '@/hooks/useAction';\nimport { updateListOrder } from '@/actions/update-list-order';\nimport { updateCardOrder } from '@/actions/update-card-order';\n\nimport { ListForm } from '@/components/list/list-form';\nimport { ListItem } from '@/components/list/list-item';\nimport { useGetLists } from '@/hooks/useGetLists';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '@/components/Loader';\n\nfunction reorder<T>(list: T[], startIndex: number, endIndex: number) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n\nconst BoardPage = () => {\n  const params = useParams<{ boardId: string }>();\n  const { boardId } = params;\n\n  const { data, isLoading, error } = useGetLists(boardId!);\n  const { execute: executeUpdateListOrder } = useAction(updateListOrder, {\n    onSuccess: () => {\n      toast.success('List reordered');\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const { execute: executeUpdateCardOrder } = useAction(updateCardOrder, {\n    onSuccess: () => {\n      toast.success('Card reordered');\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const [orderedData, setOrderedData] = useState<ListWithCards[]>([]);\n\n  useEffect(() => {\n    if (!isLoading && data) {\n      setOrderedData(data);\n    }\n  }, [isLoading, data]);\n\n  const onDragEnd = (result: any) => {\n    const { destination, source, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    // if dropped in the same position\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // User moves a list\n    if (type === 'list') {\n      const items = reorder(\n        orderedData,\n        source.index,\n        destination.index,\n      ).map((item, index) => ({ ...item, order: index }));\n\n      setOrderedData(items);\n      executeUpdateListOrder({\n        items,\n        boardId: boardId!,\n      });\n    }\n\n    // User moves a card\n    if (type === 'card') {\n      let newOrderedData = [...orderedData];\n\n      // Source and destination list\n      const sourceList = newOrderedData.find(list => list.id === source.droppableId);\n      const destList = newOrderedData.find(list => list.id === destination.droppableId);\n\n      if (!sourceList || !destList) {\n        return;\n      }\n\n      // Check if cards exists on the sourceList\n      if (!sourceList.cards) {\n        sourceList.cards = [];\n      }\n\n      // Check if cards exists on the destList\n      if (!destList.cards) {\n        destList.cards = [];\n      }\n\n      // Moving the card in the same list\n      if (source.droppableId === destination.droppableId) {\n        const reorderedCards = reorder(\n          sourceList.cards,\n          source.index,\n          destination.index,\n        );\n\n        reorderedCards.forEach((card, idx) => {\n          card.order = idx;\n        });\n\n        sourceList.cards = reorderedCards;\n\n        setOrderedData(newOrderedData);\n        executeUpdateCardOrder({\n          boardId: boardId!,\n          items: reorderedCards,\n        });\n        // User moves the card to another list\n      } else {\n        // Remove card from the source list\n        const [movedCard] = sourceList.cards.splice(source.index, 1);\n        \n        // Assign the new listId to the moved card\n        movedCard.listId = destination.droppableId;\n        \n        // Add card to the destination list\n        destList.cards.splice(destination.index, 0, movedCard);\n\n        // Update the order for each card in the source list\n        sourceList.cards.forEach((card, idx) => {\n          card.order = idx;\n        });\n        \n        // Update the order for each card in the destination list\n        destList.cards.forEach((card, idx) => {\n          card.order = idx;\n        });\n\n        setOrderedData(newOrderedData);\n        executeUpdateCardOrder({\n          boardId: boardId!,\n          items: destList.cards,\n        });\n      }\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className='h-full flex items-center justify-center p-4'>\n        <Loader size='lg' />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className='h-full flex items-center justify-center p-4'>\n        <div className='text-center'>\n          <h2 className='text-2xl font-bold mb-2'>Something went wrong</h2>\n          <p className='text-muted-foreground'>Could not load board data. Please try again later.</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"lists\" type=\"list\" direction=\"horizontal\">\n        {(provided) => (\n          <div\n            className=\"px-4 py-6 gap-3 h-full overflow-x-auto scrollbar-hide\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            <div className=\"flex gap-3\">\n              {orderedData.map((list, index) => {\n                return (\n                  <ListItem\n                    key={list.id}\n                    index={index}\n                    data={list}\n                  />\n                )\n              })}\n              {provided.placeholder}\n              <ListForm />\n            </div>\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  )\n}\n\nexport default BoardPage;\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/list/list-options.tsx\nimport { ElementRef, useRef } from 'react';\nimport { toast } from 'sonner';\nimport { MoreHorizontal, X } from 'lucide-react';\n\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  PopoverClose,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\n\nimport { useAction } from '@/hooks/useAction';\nimport { deleteList } from '@/actions/delete-list';\nimport { copyList } from '@/actions/copy-list';\nimport { useParams } from 'react-router-dom';\n\ninterface ListOptionsProps {\n  id: string;\n  onAddCard: () => void;\n}\n\nexport const ListOptions = ({ id, onAddCard }: ListOptionsProps) => {\n  const closeRef = useRef<ElementRef<'button'>>(null);\n  const params = useParams<{ boardId: string }>();\n  const { boardId } = params;\n\n  const { execute: executeDelete } = useAction(deleteList, {\n    onSuccess: () => {\n      toast.success('List deleted');\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const { execute: executeCopy } = useAction(copyList, {\n    onSuccess: () => {\n      toast.success('List copied');\n      closeRef.current?.click();\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const onDelete = () => {\n    executeDelete({ id, boardId: boardId! });\n  };\n\n  const onCopy = () => {\n    executeCopy({ id, boardId: boardId! });\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button className='h-auto w-auto p-2' variant='ghost'>\n          <MoreHorizontal className='h-4 w-4' />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='px-0 pt-3 pb-3' side='bottom' align='start'>\n        <div className='text-sm font-medium text-center text-neutral-600 pb-4'>\n          List actions\n        </div>\n        <PopoverClose ref={closeRef} asChild>\n          <Button\n            className='h-auto w-auto p-2 absolute top-2 right-2 text-neutral-600'\n            variant='ghost'\n          >\n            <X className='h-4 w-4' />\n          </Button>\n        </PopoverClose>\n        <Button\n          onClick={onAddCard}\n          className='rounded-none w-full h-auto p-2 px-5 justify-start font-normal text-sm'\n          variant='ghost'\n        >\n          Add card...\n        </Button>\n        <Button\n          onClick={onCopy}\n          className='rounded-none w-full h-auto p-2 px-5 justify-start font-normal text-sm'\n          variant='ghost'\n        >\n          Copy list...\n        </Button>\n        <Separator />\n        <Button\n          onClick={onDelete}\n          className='rounded-none w-full h-auto p-2 px-5 justify-start font-normal text-sm'\n          variant='ghost'\n        >\n          Delete this list\n        </Button>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\u0005End File\u0006import { ElementRef, useRef, useState } from 'react';\nimport { Draggable, Droppable } from '@hello-pangea/dnd';\nimport { cn } from '@/lib/utils';\n\nimport { ListWithCards } from '@/types';\n\nimport { CardForm } from '@/components/card/card-form';\nimport { CardItem } from '@/components/card/card-item';\nimport { ListHeader } from '@/components/list/list-header';\nimport { toast } from 'sonner';\nimport { createCard } from '@/actions/create-card';\nimport { useAction } from '@/hooks/useAction';\nimport { useParams } from 'react-router-dom';\n\ninterface ListItemProps {\n  data: ListWithCards;\n  index: number;\n}\n\nexport const ListItem = ({ data, index }: ListItemProps) => {\n  const params = useParams<{ boardId: string }>();\n  const { boardId } = params;\n\n  const textareaRef = useRef<ElementRef<'textarea'>>(null);\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { execute, fieldErrors } = useAction(createCard, {\n    onSuccess: (data) => {\n      toast.success(`Card \"${data.title}\" created`);\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const enableEditing = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    });\n  };\n\n  const disableEditing = () => {\n    setIsEditing(false);\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Escape') {\n      disableEditing();\n    }\n  };\n\n  const onSubmit = (formData: FormData) => {\n    const title = formData.get('title') as string;\n    const listId = formData.get('listId') as string;\n\n    execute({\n      title,\n      listId,\n      boardId: boardId!,\n    });\n  };\n\n  return (\n    <Draggable draggableId={data.id} index={index}>\n      {(provided) => (\n        <li\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          className='h-full w-[272px] shrink-0 select-none'\n        >\n          <div\n            {...provided.dragHandleProps}\n            className='w-full rounded-md bg-[#f1f2f4] shadow-md pb-2'\n          >\n            <ListHeader onAddCard={enableEditing} data={data} />\n            <Droppable droppableId={data.id} type='card'>\n              {(provided) => (\n                <ol\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  className={cn(\n                    'mx-1 px-1 py-0.5 flex flex-col gap-y-2',\n                    data.cards.length > 0 ? 'mt-2' : 'mt-0'\n                  )}\n                >\n                  {data.cards.map((card, index) => (\n                    <CardItem\n                      index={index}\n                      key={card.id}\n                      data={card}\n                      boardId={boardId}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </ol>\n              )}\n            </Droppable>\n            <CardForm\n              listId={data.id}\n              ref={textareaRef}\n              isEditing={isEditing}\n              enableEditing={enableEditing}\n              disableEditing={disableEditing}\n              onKeyDown={onKeyDown}\n              onSubmit={onSubmit}\n              fieldErrors={fieldErrors}\n            />\n          </div>\n        </li>\n      )}\n    </Draggable>\n  );\n};\n\u0005End File\u0006# frontend/src/components/modals/card-modal/header.tsx\nimport { FormInput } from '@/components/form/form-input';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { CardWithList } from '@/types';\nimport { useParams } from 'react-router-dom';\nimport { updateCard } from '@/actions/update-card';\nimport { useAction } from '@/hooks/useAction';\nimport { toast } from 'sonner';\nimport { useRef, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Check, Edit } from 'lucide-react';\n\ninterface HeaderProps {\n  data: CardWithList;\n}\n\nexport const Header = ({ data }: HeaderProps) => {\n  const queryClient = useQueryClient();\n  const params = useParams<{ boardId: string }>();\n  const { boardId } = params;\n\n  const { execute } = useAction(updateCard, {\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({\n        queryKey: ['card', data.id],\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: ['card-logs', data.id],\n      });\n\n      toast.success(`Renamed to \"${data.title}\"`);\n      setTitle(data.title);\n      disableEditing();\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const [title, setTitle] = useState(data.title);\n  const [isEditing, setIsEditing] = useState(false);\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const enableEditing = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      inputRef.current?.focus();\n      inputRef.current?.select();\n    });\n  };\n\n  const disableEditing = () => {\n    setIsEditing(false);\n  };\n\n  const onSubmit = (formData: FormData) => {\n    const title = formData.get('title') as string;\n    const boardId = formData.get('boardId') as string;\n    const id = formData.get('id') as string;\n\n    if (title === data.title) {\n      return disableEditing();\n    }\n\n    execute({\n      title,\n      boardId,\n      id,\n    });\n  };\n\n  const onBlur = () => {\n    formRef.current?.requestSubmit();\n  };\n\n  return (\n    <div className='flex items-start gap-x-3 mb-6 w-full'>\n      <div className='flex-auto'>\n        {isEditing ? (\n          <form ref={formRef} action={onSubmit} className='flex-1'>\n            <input hidden name='boardId' value={boardId} readOnly />\n            <input hidden name='id' value={data.id} readOnly />\n            <FormInput\n              ref={inputRef}\n              onBlur={onBlur}\n              id='title'\n              defaultValue={title}\n              className='font-semibold text-xl px-1 text-neutral-700 bg-transparent border-transparent focus-visible:bg-white focus-visible:border-input mb-0.5 truncate'\n            />\n            <div className='flex items-center gap-x-1 pt-2'>\n              <Button\n                type='submit'\n                size='sm'\n                className='gap-1 bg-blue-500 hover:bg-blue-500/90'\n              >\n                <Check className='h-4 w-4' />\n                Save\n              </Button>\n              <Button\n                type='button'\n                onClick={disableEditing}\n                size='sm'\n                variant='ghost'\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        ) : (\n          <div\n            onClick={enableEditing}\n            className='w-full cursor-pointer px-1.5 py-1.5 text-xl font-semibold text-neutral-700 rounded hover:bg-neutral-200'\n          >\n            {title}\n          </div>\n        )}\n      </div>\n      {!isEditing && (\n        <Button\n          onClick={enableEditing}\n          className='h-6 w-6'\n          variant='ghost'\n          size='icon'\n        >\n          <Edit className='h-4 w-4' />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nHeader.Skeleton = function HeaderSkeleton() {\n  return <Skeleton className='w-full h-8 mb-6' />;\n};\n\u0005End File\u0006# frontend/src/components/modals/card-modal/activity.tsx\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { ActivityIcon } from 'lucide-react';\nimport { ActivityItem } from '@/components/activity-item';\nimport { useParams } from 'react-router-dom';\nimport { useCardLogs } from '@/hooks/useCardLogs';\nimport { FormattedDate } from '@/lib/formatted-date';\n\ninterface ActivityProps {\n  items: any[];\n}\n\nexport const Activity = () => {\n  const params = useParams<{ boardId: string }>();\n  const cardId = params.cardId;\n\n  const { data: cardLogs, isLoading } = useCardLogs(cardId);\n\n  return (\n    <div className='flex items-start gap-x-3 w-full'>\n      <ActivityIcon className='h-5 w-5 mt-0.5 text-neutral-700' />\n      <div className='w-full'>\n        <p className='font-semibold text-neutral-700 mb-2'>Activity</p>\n        <ol className='mt-2 space-y-4'>\n          {isLoading && (\n            <>\n              <ActivitySkeleton />\n              <ActivitySkeleton />\n              <ActivitySkeleton />\n            </>\n          )}\n          {cardLogs && cardLogs.length === 0 && (\n            <p className='text-sm text-muted-foreground text-center my-4'>\n              No activity for this card yet\n            </p>\n          )}\n          {cardLogs && cardLogs.length > 0 && (\n            <>\n              {cardLogs.map((item) => (\n                <ActivityItem\n                  key={item.id}\n                  data={{\n                    userName: item.userName || item.userEmail,\n                    userImage: item.userImageUrl,\n                    action: item.action,\n                    entity: item.entity,\n                    createdAt: item.createdAt,\n                    data: {\n                      before: item.valueBefore,\n                      after: item.valueAfter,\n                    },\n                  }}\n                />\n              ))}\n              <div className='flex items-center gap-x-2 mt-2'>\n                <div className='w-8 h-8 rounded-full bg-neutral-100 flex items-center justify-center text-xs'>\n                  <FormattedDate date={new Date()} />\n                </div>\n                <p className='text-xs text-muted-foreground'>\n                  Card created on{' '}\n                  <FormattedDate\n                    date={new Date(cardLogs[cardLogs.length - 1].createdAt)}\n                  />\n                </p>\n              </div>\n            </>\n          )}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nconst ActivitySkeleton = () => {\n  return (\n    <div className='flex items-start gap-x-2'>\n      <Skeleton className='h-8 w-8 rounded-full bg-neutral-200' />\n      <div className='w-full'>\n        <Skeleton className='w-24 h-4 mb-2 bg-neutral-200' />\n        <Skeleton className='w-full h-4 bg-neutral-200' />\n      </div>\n    </div>\n  );\n};\n\nActivity.Skeleton = function ActivitySkeleton() {\n  return (\n    <div className='flex items-start gap-x-3 w-full'>\n      <Skeleton className='h-6 w-6 bg-neutral-200' />\n      <div className='w-full'>\n        <Skeleton className='w-24 h-6 mb-2 bg-neutral-200' />\n        <Skeleton className='w-full h-10 bg-neutral-200' />\n      </div>\n    </div>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  PopoverClose,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Check, Check2, ChevronsUpDown, MoveVertical, X } from 'lucide-react';\nimport { FormEvent, forwardRef, useRef, useState } from 'react';\nimport { toast } from 'sonner';\nimport { useAction } from '@/hooks/useAction';\nimport { moveCard } from '@/actions/move-card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useParams } from 'react-router-dom';\nimport { CardWithList } from '@/types';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useGetLists } from '@/hooks';\n\ninterface MoveProps {\n  data: CardWithList;\n  onClose: () => void;\n}\n\nexport const Move = forwardRef<HTMLButtonElement, MoveProps>(\n  ({ data, onClose }, ref) => {\n    const params = useParams<{ boardId: string }>();\n    const queryClient = useQueryClient();\n    const { boardId } = params;\n\n    const closeRef = useRef<HTMLButtonElement>(null);\n\n    const { execute, isLoading } = useAction(moveCard, {\n      onSuccess: (data) => {\n        toast.success(`Card \"${data.title}\" moved`);\n        queryClient.invalidateQueries({\n          queryKey: ['board', data.boardId],\n        });\n        queryClient.invalidateQueries({\n          queryKey: ['card', data.id],\n        });\n        onClose();\n      },\n      onError: (error) => {\n        toast.error(error);\n      },\n    });\n\n    const { data: lists, isLoading: listsLoading } = useGetLists(boardId!);\n\n    const [selectedListId, setSelectedListId] = useState(data.listId);\n\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n\n      execute({\n        boardId: boardId!,\n        cardId: data.id,\n        listId: selectedListId,\n      });\n    };\n\n    return (\n      <Popover>\n        <PopoverTrigger asChild ref={ref}>\n          <Button\n            variant='outline'\n            className='w-full justify-start'\n            size='sm'\n          >\n            <MoveVertical className='h-4 w-4 mr-2' />\n            Move\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className='px-0 pt-3 pb-3' side='bottom'>\n          <div className='text-sm font-medium text-center text-neutral-600 pb-4'>\n            Move card\n          </div>\n          <PopoverClose asChild ref={closeRef}>\n            <Button\n              className='h-auto w-auto p-2 absolute top-2 right-2 text-neutral-600'\n              variant='ghost'\n              size='sm'\n            >\n              <X className='h-4 w-4' />\n            </Button>\n          </PopoverClose>\n          <form onSubmit={onSubmit} className='space-y-4 px-3'>\n            <div className='space-y-2'>\n              <label className='text-xs font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'>\n                Select destination list\n              </label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant='outline'\n                    role='combobox'\n                    className='w-full justify-between'\n                    disabled={isLoading || listsLoading}\n                  >\n                    {selectedListId\n                      ? lists?.find((list) => list.id === selectedListId)\n                          ?.title || 'Select list'\n                      : 'Select list'}\n                    <ChevronsUpDown className='ml-2 h-4 w-4 shrink-0 opacity-50' />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className='w-full p-0'>\n                  {lists?.map((list) => (\n                    <div\n                      key={list.id}\n                      className={`flex items-center justify-between px-3 py-2 cursor-pointer hover:bg-neutral-100 ${\n                        selectedListId === list.id ? 'bg-neutral-100' : ''\n                      }`}\n                      onClick={() => setSelectedListId(list.id)}\n                    >\n                      <span>{list.title}</span>\n                      {selectedListId === list.id && (\n                        <Check className='h-4 w-4' />\n                      )}\n                    </div>\n                  ))}\n                </PopoverContent>\n              </Popover>\n            </div>\n            <div className='flex items-center gap-x-2'>\n              <Button\n                disabled={\n                  isLoading ||\n                  listsLoading ||\n                  !selectedListId ||\n                  selectedListId === data.listId\n                }\n                className='w-full'\n                size='sm'\n              >\n                Move\n              </Button>\n            </div>\n          </form>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\nMove.displayName = 'Move';\n\nexport const MoveSkeleton = () => {\n  return <Skeleton className='w-full h-10' />;\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/modals/card-modal/actions.tsx\nimport {\n  Trash,\n  SquarePen,\n  Copy,\n  ArrowUpRightSquare,\n  AlertCircle,\n  Minus,\n  Check,\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { CardWithList } from '@/types';\nimport { useAction } from '@/hooks/useAction';\nimport { deleteCard } from '@/actions/delete-card';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from 'sonner';\nimport { copyCard } from '@/actions/copy-card';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { forwardRef } from 'react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\n\ninterface ActionsProps {\n  data: CardWithList;\n  onCopyCard?: () => void;\n}\n\nexport const Actions = forwardRef<HTMLButtonElement, ActionsProps>(\n  ({ data, onCopyCard }, ref) => {\n    const queryClient = useQueryClient();\n    const params = useParams<{ boardId: string }>();\n    const navigate = useNavigate();\n    const { boardId } = params;\n\n    const onClose = () => {\n      navigate(`/board/${boardId}`);\n    };\n\n    const { execute: executeDeleteCard, isLoading: isLoadingDelete } = useAction(deleteCard, {\n      onSuccess: () => {\n        toast.success(`Card \"${data.title}\" deleted`);\n        onClose();\n      },\n      onError: (error) => {\n        toast.error(error);\n      },\n    });\n\n    const { execute: executeCopyCard, isLoading: isLoadingCopy } = useAction(copyCard, {\n      onSuccess: (data) => {\n        toast.success(`Card \"${data.title}\" copied`);\n        queryClient.invalidateQueries({\n          queryKey: ['board', boardId],\n        });\n        onCopyCard?.();\n      },\n      onError: (error) => {\n        toast.error(error);\n      },\n    });\n\n    const onDelete = () => {\n      executeDeleteCard({\n        id: data.id,\n        boardId: boardId!,\n      });\n    };\n\n    const onCopy = () => {\n      executeCopyCard({\n        id: data.id,\n        boardId: boardId!,\n      });\n    };\n\n    return (\n      <div className='space-y-2 mt-2'>\n        <p className='text-xs font-semibold'>Actions</p>\n        <Button\n          onClick={onCopy}\n          disabled={isLoadingCopy}\n          ref={ref}\n          size='sm'\n          variant='outline'\n          className='w-full justify-start'\n        >\n          <Copy className='h-4 w-4 mr-2' />\n          Copy\n        </Button>\n        <Button\n          onClick={onDelete}\n          disabled={isLoadingDelete}\n          size='sm'\n          variant='outline'\n          className='w-full justify-start text-red-500 hover:text-red-500'\n        >\n          <Trash className='h-4 w-4 mr-2' />\n          Delete\n        </Button>\n      </div>\n    );\n  }\n);\n\nActions.displayName = 'Actions';\n\nexport const ActionsSkeleton = () => {\n  return (\n    <div className='space-y-2 mt-2'>\n      <Skeleton className='w-20 h-4 bg-neutral-200' />\n      <Skeleton className='w-full h-8 bg-neutral-200' />\n      <Skeleton className='w-full h-8 bg-neutral-200' />\n    </div>\n  );\n};\n\u0005End File\u0006# frontend/src/components/modals/card-modal/description.tsx\nimport { CardWithList } from '@/types';\nimport { AlignLeft } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { ElementRef, useRef, useState } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useParams } from 'react-router-dom';\nimport { useAction } from '@/hooks/useAction';\nimport { updateCard } from '@/actions/update-card';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { FormTextarea } from '@/components/form/form-textarea';\n\ninterface DescriptionProps {\n  data: CardWithList;\n}\n\nexport const Description = ({ data }: DescriptionProps) => {\n  const queryClient = useQueryClient();\n  const params = useParams<{ boardId: string }>();\n  const { boardId } = params;\n\n  const [isEditing, setIsEditing] = useState(false);\n  const textareaRef = useRef<ElementRef<'textarea'>>(null);\n  const formRef = useRef<ElementRef<'form'>>(null);\n\n  const enableEditing = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    });\n  };\n\n  const disableEditing = () => {\n    setIsEditing(false);\n  };\n\n  const { execute, fieldErrors } = useAction(updateCard, {\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({\n        queryKey: ['card', data.id],\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: ['card-logs', data.id],\n      });\n\n      toast.success(`Card \"${data.title}\" updated`);\n      disableEditing();\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const onSubmit = (formData: FormData) => {\n    const description = formData.get('description') as string;\n    const boardId = formData.get('boardId') as string;\n    const id = formData.get('id') as string;\n\n    execute({\n      id,\n      boardId,\n      description,\n    });\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Escape') {\n      disableEditing();\n    }\n  };\n\n  return (\n    <div className='flex items-start gap-x-3 w-full'>\n      <AlignLeft className='h-5 w-5 mt-0.5 text-neutral-700' />\n      <div className='w-full'>\n        <p className='font-semibold text-neutral-700 mb-2'>Description</p>\n        {isEditing ? (\n          <form action={onSubmit} ref={formRef} className='space-y-2'>\n            <FormTextarea\n              id='description'\n              onKeyDown={onKeyDown}\n              ref={textareaRef}\n              className='w-full mt-2'\n              placeholder='Add a more detailed description...'\n              defaultValue={data.description || undefined}\n              errors={fieldErrors}\n            />\n            <input hidden name='boardId' value={boardId} readOnly />\n            <input hidden name='id' value={data.id} readOnly />\n            <div className='flex items-center gap-x-2'>\n              <Button type='submit' size='sm'>\n                Save\n              </Button>\n              <Button\n                type='button'\n                onClick={disableEditing}\n                size='sm'\n                variant='ghost'\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        ) : (\n          <div\n            onClick={enableEditing}\n            role='button'\n            className='min-h-[78px] bg-neutral-50 text-sm font-medium py-3 px-3.5 rounded-md'\n          >\n            {data.description || 'Add a more detailed description...'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nDescription.Skeleton = function DescriptionSkeleton() {\n  return (\n    <div className='flex items-start gap-x-3 w-full'>\n      <Skeleton className='h-6 w-6 bg-neutral-200' />\n      <div className='w-full'>\n        <Skeleton className='w-24 h-6 mb-2 bg-neutral-200' />\n        <Skeleton className='w-full h-[78px] bg-neutral-200' />\n      </div>\n    </div>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { useOrganization, useOrganizationList } from '@clerk/clerk-react';\nimport { Search } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useGetBoards } from '@/hooks/useGetBoards';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport BoardCreateModal from '@/components/dialogs/create-board-dialog';\nimport { useUser } from '@clerk/nextjs';\n\nexport const BoardList = () => {\n  const { data: boards, isLoading: isLoadingBoards } = useGetBoards();\n  const { user } = useAuth();\n  const [isCreateBoardModalOpen, setIsCreateBoardModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Filter boards based on search query\n  const filteredBoards = boards?.filter((board) =>\n    board.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Function to handle search input change\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  return (\n    <div className='space-y-4'>\n      <div className='flex items-center justify-between'>\n        <div className='flex items-center text-lg font-semibold text-neutral-700'>\n          <span>Your boards</span>\n          <span className='ml-2 text-sm font-normal text-neutral-500'>\n            ({boards?.length || 0})\n          </span>\n        </div>\n        <Button\n          onClick={() => setIsCreateBoardModalOpen(true)}\n          variant='primary'\n          size='sm'\n        >\n          Create\n        </Button>\n      </div>\n      <div className='relative'>\n        <Search className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />\n        <Input\n          className='w-full pl-9'\n          placeholder='Search boards...'\n          value={searchQuery}\n          onChange={handleSearchChange}\n        />\n      </div>\n      <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4'>\n        {isLoadingBoards &&\n          Array(8)\n            .fill(0)\n            .map((_, i) => <BoardSkeleton key={i} />)}\n        {filteredBoards?.map((board) => (\n          <Link\n            key={board.id}\n            href={`/board/${board.id}`}\n            className='group relative aspect-video bg-no-repeat bg-center bg-cover bg-sky-700 rounded-sm h-full w-full p-2 overflow-hidden'\n            style={{ backgroundImage: `url(${board.imageThumbUrl})` }}\n          >\n            <div className='absolute inset-0 bg-black/30 group-hover:bg-black/40 transition' />\n            <p className='relative font-semibold text-white'>{board.title}</p>\n          </Link>\n        ))}\n      </div>\n      <BoardCreateModal\n        isOpen={isCreateBoardModalOpen}\n        onClose={() => setIsCreateBoardModalOpen(false)}\n      />\n    </div>\n  );\n};\n\nconst BoardSkeleton = () => {\n  return <Skeleton className='aspect-video h-full w-full p-2' />;\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/form/form-popover.tsx\nimport { ElementRef, useRef } from 'react';\nimport { toast } from 'sonner';\nimport { X } from 'lucide-react';\nimport { useOnClickOutside } from 'usehooks-ts';\n\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  PopoverClose,\n} from '@/components/ui/popover';\nimport { useAction } from '@/hooks/useAction';\nimport { Button } from '@/components/ui/button';\nimport { createBoard } from '@/actions/create-board';\nimport { FormInput } from './form-input';\nimport { FormSubmit } from './form-submit';\nimport { FormPicker } from './form-picker';\n\nimport { Select, SelectItem, SelectTrigger, SelectContent, SelectValue } from '@/components/ui/select';\nimport { useNavigate } from 'react-router-dom';\n\ninterface FormPopoverProps {\n  children: React.ReactNode;\n  side?: 'left' | 'right' | 'top' | 'bottom';\n  align?: 'start' | 'center' | 'end';\n  sideOffset?: number;\n}\n\nexport const FormPopover = ({\n  children,\n  side = 'bottom',\n  align,\n  sideOffset = 0,\n}: FormPopoverProps) => {\n  const navigate = useNavigate();\n  const closeRef = useRef<ElementRef<'button'>>(null);\n\n  const { execute, fieldErrors } = useAction(createBoard, {\n    onSuccess: (data) => {\n      toast.success('Board created!');\n      closeRef.current?.click();\n      navigate(`/board/${data.id}`);\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const onSubmit = (formData: FormData) => {\n    const title = formData.get('title') as string;\n    const image = formData.get('image') as string;\n    const visibility = formData.get('visibility') as string || 'private';\n\n    execute({ title, image, visibility });\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>{children}</PopoverTrigger>\n      <PopoverContent\n        align={align}\n        className='w-80 pt-3'\n        side={side}\n        sideOffset={sideOffset}\n      >\n        <div className='text-sm font-medium text-center text-neutral-600 pb-4'>\n          Create board\n        </div>\n        <PopoverClose ref={closeRef} asChild>\n          <Button\n            className='h-auto w-auto p-2 absolute top-2 right-2 text-neutral-600'\n            variant='ghost'\n          >\n            <X className='h-4 w-4' />\n          </Button>\n        </PopoverClose>\n        <form action={onSubmit} className='space-y-4'>\n          <div className='space-y-4'>\n            <FormPicker id='image' errors={fieldErrors} />\n            <FormInput\n              id='title'\n              label='Board title'\n              type='text'\n              errors={fieldErrors}\n            />\n            <div className='space-y-2'>\n              <label className='text-xs font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'>\n                Visibility\n              </label>\n              <Select name='visibility' defaultValue='private'>\n                <SelectTrigger>\n                  <SelectValue placeholder='Select visibility' />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value='private'>\n                    Private - Only board members\n                  </SelectItem>\n                  <SelectItem value='public'>\n                    Public - All organization members\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <FormSubmit className='w-full'>Create</FormSubmit>\n        </form>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/form/form-picker.tsx\nimport { useEffect, useState } from 'react';\nimport { Check, Loader2, Minus } from 'lucide-react';\nimport { unsplash } from '@/lib/unsplash';\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { defaultImages } from '@/constants/images';\n\nimport { FormErrors } from './form-errors';\n\ninterface FormPickerProps {\n  id: string;\n  errors?: Record<string, string[] | undefined>;\n}\n\nexport const FormPicker = ({ id, errors }: FormPickerProps) => {\n  const [images, setImages] = useState<Array<Record<string, any>>>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedImageId, setSelectedImageId] = useState(null);\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const result = await unsplash.photos.getRandom({\n          count: 9,\n          collectionIds: ['317099'],\n          orientation: 'landscape',\n        });\n\n        if (result && result.response) {\n          const newImages = result.response as Array<Record<string, any>>;\n          setImages(newImages);\n        } else {\n          setImages(defaultImages);\n        }\n      } catch (error) {\n        setImages(defaultImages);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchImages();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className='p-6 flex items-center justify-center'>\n        <Loader2 className='h-6 w-6 text-sky-700 animate-spin' />\n      </div>\n    );\n  }\n\n  return (\n    <div className='relative'>\n      <div className='grid grid-cols-3 gap-2 mb-2'>\n        {images.map((image) => (\n          <div\n            key={image.id}\n            className={cn(\n              'cursor-pointer relative aspect-video group hover:opacity-75 transition bg-muted',\n              selectedImageId === image.id && 'ring-2 ring-sky-500 ring-offset-2'\n            )}\n            onClick={() => setSelectedImageId(image.id)}\n          >\n            <input\n              type='radio'\n              id={id}\n              name={id}\n              className='hidden'\n              checked={selectedImageId === image.id}\n              onChange={() => {}}\n              value={`${image.id}|${image.urls.thumb}|${image.urls.full}|${image.links.html}|${image.user.name}`}\n            />\n            <img\n              src={image.urls.thumb}\n              alt='Unsplash image'\n              className='object-cover w-full h-full rounded-sm'\n            />\n            {selectedImageId === image.id && (\n              <div className='absolute inset-y-0 h-full w-full bg-black/30 flex items-center justify-center'>\n                <Check className='h-4 w-4 text-white' />\n              </div>\n            )}\n            <Link\n              href={image.links.html}\n              target='_blank'\n              className='opacity-0 group-hover:opacity-100 absolute bottom-0 w-full text-[10px] truncate text-white hover:underline p-1 bg-black/50'\n            >\n              {image.user.name}\n            </Link>\n          </div>\n        ))}\n      </div>\n      <FormErrors id='image' errors={errors} />\n    </div>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/activity-item.tsx\nimport { Avatar, AvatarImage } from '@/components/ui/avatar';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface ActivityItemProps {\n  data: {\n    action: string;\n    entity: string;\n    userName: string;\n    userImage?: string;\n    createdAt: string;\n    data?: {\n      before?: string | null;\n      after?: string | null;\n    };\n  };\n}\n\nexport const ActivityItem = ({ data }: ActivityItemProps) => {\n  const { action, entity, userName, userImage, createdAt, data: changes } =\n    data;\n\n  return (\n    <li className='flex items-start gap-x-2'>\n      <Avatar className='h-8 w-8'>\n        <AvatarImage src={userImage} />\n      </Avatar>\n      <div className='flex flex-col space-y-0.5'>\n        <p className='text-sm text-muted-foreground'>\n          <span className='font-semibold lowercase text-neutral-700'>\n            {userName}\n          </span>{' '}\n          {generateMessage(action, entity, changes)}\n        </p>\n        <p className='text-xs text-muted-foreground'>\n          {formatDistanceToNow(new Date(createdAt), {\n            addSuffix: true,\n          })}\n        </p>\n      </div>\n    </li>\n  );\n};\n\nconst generateMessage = (\n  action: string,\n  entity: string,\n  data?: {\n    before?: string | null;\n    after?: string | null;\n  }\n) => {\n  switch (action) {\n    case 'created':\n      return `created this ${entity.toLowerCase()}`;\n    case 'updated':\n      return generateUpdateMessage(entity, data);\n    case 'deleted':\n      return `deleted a ${entity.toLowerCase()}`;\n    case 'completed':\n      return `marked this ${entity.toLowerCase()} as completed`;\n    default:\n      return `performed an action on this ${entity.toLowerCase()}`;\n  }\n};\n\nconst generateUpdateMessage = (\n  entity: string,\n  data?: {\n    before?: string | null;\n    after?: string | null;\n  }\n) => {\n  if (!data) return `updated this ${entity.toLowerCase()}`;\n\n  // Handle title changes\n  if (data.before && data.after) {\n    return `renamed this ${entity.toLowerCase()} from \"${truncate(\n      data.before,\n      15\n    )}\" to \"${truncate(data.after, 15)}\"`;\n  }\n\n  // Handle description changes\n  if (data.after && !data.before) {\n    return `added a description to this ${entity.toLowerCase()}`;\n  }\n\n  if (!data.after && data.before) {\n    return `removed the description from this ${entity.toLowerCase()}`;\n  }\n\n  if (data.before && data.after) {\n    return `updated the description of this ${entity.toLowerCase()}`;\n  }\n\n  return `updated this ${entity.toLowerCase()}`;\n};\n\nconst truncate = (str: string, n: number) => {\n  return str.length > n ? str.substring(0, n) + '...' : str;\n};\n\u0005End File\u0006# frontend/src/components/navbar/avatar-options.tsx\nimport { Link } from 'react-router-dom';\nimport { LogOut, User as UserIcon, Settings, Users, LayoutDashboard } from 'lucide-react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useSignOut } from '@/hooks';\nimport { Skeleton } from '../ui/skeleton';\n\nexport const AvatarOptions = () => {\n  const { user, isLoading } = useAuth();\n  const logout = useSignOut();\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  if (isLoading) {\n    return <Skeleton className=\"h-8 w-8 rounded-full\" />;\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger className='cursor-pointer'>\n        <Avatar className='h-8 w-8'>\n          <AvatarImage src={user?.image || ''} alt='Avatar' />\n          <AvatarFallback className='bg-primary/10 text-primary'>\n            {user?.name ? getInitials(user.name) : 'U'}\n          </AvatarFallback>\n        </Avatar>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align='end' className='w-60'>\n        <DropdownMenuLabel>\n          <div className='flex flex-col space-y-1'>\n            <p className='text-sm font-medium leading-none'>{user?.name || user?.email}</p>\n            <p className='text-xs leading-none text-muted-foreground'>{user?.email}</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <Link to=\"/dashboard\" className='cursor-pointer flex items-center'>\n            <LayoutDashboard className='mr-2 h-4 w-4' />\n            Dashboard\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link to=\"/profile\" className='cursor-pointer flex items-center'>\n            <UserIcon className='mr-2 h-4 w-4' />\n            Profile\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link to=\"/settings\" className='cursor-pointer flex items-center'>\n            <Settings className='mr-2 h-4 w-4' />\n            Settings\n          </Link>\n        </DropdownMenuItem>\n        {user?.role === 'admin' && (\n          <DropdownMenuItem asChild>\n            <Link to=\"/users\" className='cursor-pointer flex items-center'>\n              <Users className='mr-2 h-4 w-4' />\n              Manage Users\n            </Link>\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem \n          onClick={() => logout.mutate()}\n          className='cursor-pointer text-red-600 focus:text-red-600'\n        >\n          <LogOut className='mr-2 h-4 w-4' />\n          Log out\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/components/dialogs/add-user-dialog.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { useEffect } from 'react';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useCreateUser } from '@/hooks';\nimport { Loader } from '@/components/Loader';\nimport { toast } from 'sonner';\n\ninterface AddUserDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst formSchema = z.object({\n  name: z.string().min(2, {\n    message: 'Name must be at least 2 characters.',\n  }),\n  email: z.string().email({\n    message: 'Please enter a valid email address.',\n  }),\n  role: z.enum(['user', 'admin']),\n  password: z\n    .string()\n    .min(8, {\n      message: 'Password must be at least 8 characters.',\n    })\n    .regex(/[A-Z]/, {\n      message: 'Password must contain at least one uppercase letter.',\n    })\n    .regex(/[a-z]/, {\n      message: 'Password must contain at least one lowercase letter.',\n    })\n    .regex(/[0-9]/, {\n      message: 'Password must contain at least one number.',\n    }),\n});\n\nexport function AddUserDialog({ open, setOpen }: AddUserDialogProps) {\n  const createUser = useCreateUser();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      role: 'user',\n      password: '',\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof formSchema>) => {\n    createUser.mutate(values);\n  };\n\n  useEffect(() => {\n    if (createUser.isSuccess) {\n      toast.success('User created successfully');\n      setOpen(false);\n      form.reset();\n    }\n  }, [createUser.isSuccess, form, setOpen]);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className='sm:max-w-[425px]'>\n        <DialogHeader>\n          <DialogTitle>Add New User</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n            <FormField\n              control={form.control}\n              name='name'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder='Enter user name' {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name='email'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder='Enter user email'\n                      type='email'\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name='password'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder='Enter password'\n                      type='password'\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name='role'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder='Select a role' />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value='user'>User</SelectItem>\n                      <SelectItem value='admin'>Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className='flex justify-end gap-2'>\n              <Button\n                type='button'\n                variant='outline'\n                onClick={() => setOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type='submit'\n                disabled={createUser.isPending || !form.formState.isValid}\n              >\n                {createUser.isPending ? (\n                  <>\n                    <Loader className='mr-2' />\n                    Creating...\n                  </>\n                ) : (\n                  'Create User'\n                )}\n              </Button>\n            </div>\n            {createUser.isError && (\n              <p className='text-sm text-red-500'>\n                {\n                  // @ts-ignore\n                  createUser.error?.response?.data?.message ||\n                    'An error occurred while creating the user'\n                }\n              </p>\n            )}\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\u0005End File\u0006import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage, Form } from '../ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { Input } from '../ui/input';\nimport { Button } from '../ui/button';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Loader } from '../Loader';\nimport { useCreateBoard } from '@/hooks';\nimport { useEffect } from 'react';\nimport { toast } from 'sonner';\nimport { useNavigate } from 'react-router-dom';\nimport { FormPicker } from '../form/form-picker';\n\ninterface CreateBoardDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst formSchema = z.object({\n  title: z.string().min(1, \"Board title is required\"),\n  visibility: z.enum([\"private\", \"public\"]),\n  image: z.string().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst BoardCreateModal = ({ isOpen, onClose }: CreateBoardDialogProps) => {\n  const createBoard = useCreateBoard();\n  const navigate = useNavigate();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: '',\n      visibility: 'private',\n      image: undefined,\n    },\n  });\n\n  useEffect(() => {\n    if (createBoard.isSuccess) {\n      toast.success('Board created!');\n      navigate(`/board/${createBoard.data?.id}`);\n      onClose();\n      form.reset();\n    }\n  }, [createBoard.isSuccess, createBoard.data, navigate, onClose, form]);\n\n  const onSubmit = (data: FormValues) => {\n    createBoard.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create a new board</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormPicker id=\"image\" errors={form.formState.errors} />\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Board Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter board title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"visibility\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Visibility</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select board visibility\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"private\">Private - Only board members</SelectItem>\n                      <SelectItem value=\"public\">Public - All organization members</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex justify-end\">\n              <Button\n                type=\"submit\"\n                disabled={createBoard.isPending || !form.formState.isValid}\n                className=\"w-full sm:w-auto\"\n              >\n                {createBoard.isPending ? (\n                  <>\n                    <Loader className=\"mr-2\" />\n                    Creating...\n                  </>\n                ) : (\n                  'Create Board'\n                )}\n              </Button>\n            </div>\n            {createBoard.isError && (\n              <div className=\"text-red-500 text-sm mt-2\">\n                {createBoard.error instanceof Error ? createBoard.error.message : 'An error occurred'}\n              </div>\n            )}\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default BoardCreateModal;\n\u0005End File\u0006import { ElementRef, useRef, useState } from 'react';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { Card } from '@prisma/client';\nimport { css } from 'styled-system/css';\nimport { Calendar, Check, CheckCircle2, Clock, Pencil } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { CardWithList } from '@/types';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { useAction } from '@/hooks/useAction';\nimport { updateCard } from '@/actions/update-card';\nimport { toast } from 'sonner';\nimport { CardModal } from '@/components/modals/card-modal';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '../ui/tooltip';\nimport { useParams, useNavigate } from 'react-router-dom';\n\ninterface CardItemProps {\n  data: Card;\n  index: number;\n  boardId?: string;\n}\n\nexport const CardItem = ({ data, index, boardId }: CardItemProps) => {\n  const params = useParams<{ cardId: string }>();\n  const navigate = useNavigate();\n  const cardRef = useRef<ElementRef<'div'>>(null);\n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editValue, setEditValue] = useState(data.title);\n\n  const { execute, isLoading } = useAction(updateCard, {\n    onSuccess: (data) => {\n      toast.success(`Card \"${data.title}\" updated`);\n      setIsEditMode(false);\n    },\n    onError: (error) => {\n      toast.error(error);\n    },\n  });\n\n  const handleEditClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.stopPropagation();\n    setIsEditMode(true);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (editValue.trim() === '') return;\n\n    execute({\n      id: data.id,\n      boardId: boardId!,\n      title: editValue,\n    });\n  };\n\n  const isCardModalOpen = params.cardId === data.id;\n\n  const handleCardClick = () => {\n    navigate(`/board/${boardId}/cards/${data.id}`);\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      navigate(`/board/${boardId}`);\n    }\n  };\n\n  return (\n    <>\n      <Draggable draggableId={data.id} index={index}>\n        {(provided) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            role='button'\n            onClick={handleCardClick}\n            className='truncate border-2 border-transparent hover:border-black py-2 px-3 text-sm bg-white rounded-md shadow-sm'\n          >\n            <div className='flex flex-col space-y-2'>\n              {isEditMode ? (\n                <form onSubmit={handleEditSubmit}>\n                  <input\n                    autoFocus\n                    disabled={isLoading}\n                    value={editValue}\n                    onChange={(e) => setEditValue(e.target.value)}\n                    className='w-full border rounded px-2 py-1 text-sm mb-1'\n                    onBlur={() => {\n                      if (editValue.trim() !== '') {\n                        handleEditSubmit(\n                          {\n                            preventDefault: () => {},\n                          } as unknown as React.FormEvent<HTMLFormElement>\n                        );\n                      } else {\n                        setIsEditMode(false);\n                        setEditValue(data.title);\n                      }\n                    }}\n                    onClick={(e) => e.stopPropagation()}\n                  />\n                </form>\n              ) : (\n                <div className='flex justify-between items-start space-x-2'>\n                  <p\n                    ref={cardRef}\n                    className={css({\n                      textDecoration: data.completed ? 'line-through' : 'none',\n                    })}\n                  >\n                    {data.title}\n                  </p>\n                  <Button\n                    variant='ghost'\n                    size='icon'\n                    className='h-5 w-5 shrink-0'\n                    onClick={handleEditClick}\n                  >\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Pencil className='h-3 w-3' />\n                      </TooltipTrigger>\n                      <TooltipContent>Edit card title</TooltipContent>\n                    </Tooltip>\n                  </Button>\n                </div>\n              )}\n              <div className='flex items-center gap-2 flex-wrap'>\n                {data.completed && (\n                  <Badge variant='success'>\n                    <CheckCircle2 className='h-3.5 w-3.5 mr-1' />\n                    Completed\n                  </Badge>\n                )}\n                <Badge variant='secondary'>\n                  <Clock className='h-3.5 w-3.5 mr-1' />\n                  {formatDistanceToNow(new Date(data.createdAt), {\n                    addSuffix: true,\n                  })}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        )}\n      </Draggable>\n      <CardModal\n        id={data.id}\n        boardId={boardId}\n        open={isCardModalOpen}\n        onOpenChange={handleOpenChange}\n      />\n    </>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/hooks/index.ts\nimport { User } from \"@/types\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport axios from \"axios\";\n\n//=====================================================================\n// Auth Hooks\n//=====================================================================\n\n// Sign in hook\nexport const useSignIn = () => {\n  return useMutation({\n    mutationFn: (data: { email: string; password: string }) => {\n      return axios.post('/api/auth/signin', data);\n    },\n  });\n};\n\n// Sign up hook\nexport const useSignUp = () => {\n  return useMutation({\n    mutationFn: (data: { name: string; email: string; password: string }) => {\n      return axios.post('/api/auth/signup', data);\n    },\n  });\n};\n\n// Sign out hook\nexport const useSignOut = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: () => {\n      return axios.post('/api/auth/signout');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['user'] });\n      queryClient.invalidateQueries({ queryKey: ['boards'] });\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\n// Reset password hook\nexport const useResetPassword = () => {\n  return useMutation({\n    mutationFn: (data: { email: string }) => {\n      return axios.post('/api/auth/reset-password', data);\n    },\n  });\n};\n\n// New password hook\nexport const useNewPassword = () => {\n  return useMutation({\n    mutationFn: (data: { password: string; token: string }) => {\n      return axios.post(`/api/auth/new-password`, data);\n    },\n  });\n};\n\n// Update profile hook\nexport const useUpdateProfile = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (data: { \n      name?: string; \n      email?: string; \n      password?: string;\n      currentPassword?: string; \n    }) => {\n      return axios.patch('/api/users/me', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['user'] });\n    },\n  });\n};\n\n// Update profile hook\nexport const useUpdateUserRoleAdmin = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (data: { \n      userId: string;\n      role: string;\n    }) => {\n      return axios.patch(`/api/admin/users/${data.userId}/role`, { role: data.role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\n// Create user hook (admin only)\nexport const useCreateUser = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (data: { \n      name: string; \n      email: string; \n      password: string;\n      role: string;\n    }) => {\n      return axios.post('/api/admin/users', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\n// Delete user hook (admin only)\nexport const useDeleteUser = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (userId: string) => {\n      return axios.delete(`/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\n// Get all users hook (admin only)\nexport const useGetUsers = (options = {}) => {\n  return useQuery({\n    queryKey: ['users'],\n    queryFn: async () => {\n      const { data } = await axios.get('/api/admin/users');\n      return data.users as User[];\n    },\n    refetchOnWindowFocus: false,\n    ...options,\n  });\n};\n\n// Create board hook\nexport const useCreateBoard = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (data: { \n      title: string; \n      visibility: string;\n      image?: string;\n    }) => {\n      return axios.post('/api/boards', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['boards'] });\n    },\n  });\n};\n\n// Get board metrics\nexport const useGetBoardMetrics = () => {\n  return useQuery({\n    queryKey: ['board-metrics'],\n    queryFn: async () => {\n      const { data } = await axios.get('/api/metrics/boards');\n      return data;\n    },\n    refetchOnWindowFocus: false,\n  });\n};\n\n// Get list metrics\nexport const useGetListMetrics = () => {\n  return useQuery({\n    queryKey: ['list-metrics'],\n    queryFn: async () => {\n      const { data } = await axios.get('/api/metrics/lists');\n      return data;\n    },\n    refetchOnWindowFocus: false,\n  });\n};\n\n// Get card metrics\nexport const useGetCardMetrics = () => {\n  return useQuery({\n    queryKey: ['card-metrics'],\n    queryFn: async () => {\n      const { data } = await axios.get('/api/metrics/cards');\n      return data;\n    },\n    refetchOnWindowFocus: false,\n  });\n};\u0005End File\u0006# Chrisley304/trello-clone\nimport axios from \"axios\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nimport { Board } from \"@/types\";\n\ninterface BoardQuery {\n  limit?: number;\n  page?: number;\n  visibility?: \"public\" | \"private\";\n}\n\nexport const useGetBoards = (query?: BoardQuery) => {\n  return useQuery({\n    queryKey: [\"boards\", query],\n    queryFn: async () => {\n      let queryParams = \"\";\n      if (query) {\n        const params = new URLSearchParams();\n        if (query.limit) params.append(\"limit\", query.limit.toString());\n        if (query.page) params.append(\"page\", query.page.toString());\n        if (query.visibility) params.append(\"visibility\", query.visibility);\n        queryParams = `?${params.toString()}`;\n      }\n      \n      const response = await axios.get(`/api/boards${queryParams}`);\n      return response.data.boards as Board[];\n    },\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useGetBoard = (boardId: string, options = {}) => {\n  return useQuery({\n    queryKey: [\"board\", boardId],\n    queryFn: async () => {\n      const response = await axios.get(`/api/boards/${boardId}`);\n      return response.data.board as Board;\n    },\n    refetchOnWindowFocus: false,\n    ...options,\n  });\n};\n\nexport const useUpdateBoard = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: ({ id, ...data }: { id: string; title?: string; visibility?: string }) => {\n      return axios.patch(`/api/boards/${id}`, data);\n    },\n    onSuccess: (data) => {\n      const boardId = data.data.board.id;\n      queryClient.invalidateQueries({ queryKey: [\"board\", boardId] });\n      queryClient.invalidateQueries({ queryKey: [\"boards\"] });\n    },\n  });\n};\n\nexport const useDeleteBoard = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (boardId: string) => {\n      return axios.delete(`/api/boards/${boardId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"boards\"] });\n    },\n  });\n};\n\nexport const useDuplicateBoard = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (boardId: string) => {\n      return axios.post(`/api/boards/${boardId}/duplicate`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"boards\"] });\n    },\n  });\n};\n\u0005End File\u0006import axios from 'axios';\nimport { useQuery } from '@tanstack/react-query';\n\nexport interface AuditLog {\n  id: string;\n  userId: string;\n  userName: string | null;\n  userEmail: string;\n  userImageUrl?: string | null;\n  action: string;\n  entity: string;\n  entityId: string;\n  entityTitle: string;\n  valueBefore: string | null;\n  valueAfter: string | null;\n  createdAt: string;\n}\n\ninterface AuditLogQuery {\n  entity?: string;\n  entityId?: string;\n  action?: string;\n  limit?: number;\n  page?: number;\n}\n\nexport const useGetAuditLogs = (query?: AuditLogQuery) => {\n  return useQuery({\n    queryKey: ['audit-logs', query],\n    queryFn: async () => {\n      let queryParams = '';\n      if (query) {\n        const params = new URLSearchParams();\n        if (query.entity) params.append('entity', query.entity);\n        if (query.entityId) params.append('entityId', query.entityId);\n        if (query.action) params.append('action', query.action);\n        if (query.limit) params.append('limit', query.limit.toString());\n        if (query.page) params.append('page', query.page.toString());\n        queryParams = `?${params.toString()}`;\n      }\n\n      const response = await axios.get(`/api/audit-logs${queryParams}`);\n      return response.data.logs as AuditLog[];\n    },\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useGetBoardLogs = (boardId: string) => {\n  return useQuery({\n    queryKey: ['board-logs', boardId],\n    queryFn: async () => {\n      const response = await axios.get(`/api/boards/${boardId}/logs`);\n      return response.data.logs as AuditLog[];\n    },\n    refetchOnWindowFocus: false,\n    enabled: !!boardId,\n  });\n};\n\nexport const useGetCardLogs = (cardId?: string) => {\n  return useQuery({\n    queryKey: ['card-logs', cardId],\n    queryFn: async () => {\n      const response = await axios.get(`/api/cards/${cardId}/logs`);\n      return response.data.logs as AuditLog[];\n    },\n    refetchOnWindowFocus: false,\n    enabled: !!cardId,\n  });\n};\n\u0005End File\u0006import { ActionState, FieldErrors } from \"@/lib/create-safe-action\";\nimport { useCallback, useState } from \"react\";\n\ntype Action<TInput, TOutput> = (\n  data: TInput\n) => Promise<ActionState<TInput, TOutput>>;\n\ninterface UseActionOptions<TOutput> {\n  onSuccess?: (data: TOutput) => void;\n  onError?: (error: string) => void;\n  onComplete?: () => void;\n}\n\nexport const useAction = <TInput, TOutput>(\n  action: Action<TInput, TOutput>,\n  options: UseActionOptions<TOutput> = {}\n) => {\n  const [fieldErrors, setFieldErrors] = useState<FieldErrors<TInput> | undefined>(\n    undefined\n  );\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [data, setData] = useState<TOutput | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const execute = useCallback(\n    async (input: TInput) => {\n      setIsLoading(true);\n      setFieldErrors(undefined);\n      setError(undefined);\n      setData(undefined);\n\n      try {\n        const result = await action(input);\n\n        if (!result) {\n          return;\n        }\n\n        if (result.fieldErrors) {\n          setFieldErrors(result.fieldErrors);\n        }\n\n        if (result.error) {\n          setError(result.error);\n          options.onError?.(result.error);\n        }\n\n        if (result.data) {\n          setData(result.data);\n          options.onSuccess?.(result.data);\n        }\n      } finally {\n        setIsLoading(false);\n        options.onComplete?.();\n      }\n    },\n    [action, options]\n  );\n\n  return {\n    execute,\n    fieldErrors,\n    error,\n    data,\n    isLoading,\n  };\n};\n\u0005End File\u0006import {\n  useState,\n  useEffect,\n  createContext,\n  useContext,\n  ReactNode,\n} from 'react';\nimport axios from 'axios';\nimport { useQuery } from '@tanstack/react-query';\n\n// Define the type for the user\nexport interface User {\n  id: string;\n  name: string | null;\n  email: string;\n  role: string;\n  createdAt: Date;\n  updatedAt: Date;\n  image?: string | null;\n}\n\n// Define the context type\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  isAuthenticated: boolean;\n}\n\n// Create the context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Hook to use the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const {\n    data: user,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: ['user'],\n    queryFn: async () => {\n      try {\n        const response = await axios.get('/api/auth/me');\n        return response.data.user as User;\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n          return null;\n        }\n        throw error;\n      }\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const isAuthenticated = !!user;\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isLoading, error, isAuthenticated }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { User } from '@prisma/client';\n\nimport { prisma } from '@/lib/db';\nimport { ActionState } from '@/lib/create-safe-action';\nimport { CreateCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof CreateCardSchema>;\ntype ReturnType = ActionState<InputType, User>;\n\nexport const createUser = async (\n  data: InputType\n): Promise<ReturnType> => {\n  try {\n    const { name, email, password, role } = data;\n\n    // Check if user with email already exists\n    const existingUser = await prisma.user.findUnique({\n      where: {\n        email\n      }\n    });\n\n    if (existingUser) {\n      return {\n        error: \"Email already in use\",\n      };\n    }\n\n    const hashedPassword = await Bun.password.hash(password);\n\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        hashedPassword,\n        role: role || 'user',\n      }\n    });\n\n    // Create audit log\n    await createAuditLog({\n      entityId: user.id,\n      entityTitle: user.email,\n      entityType: \"USER\",\n      action: \"CREATE\",\n    });\n\n    return { data: user };\n  } catch (error) {\n    console.log(\"[CREATE_USER_ERROR]\", error);\n    return {\n      error: \"Failed to create user.\"\n    }\n  }\n};\n\u0005End File\u0006import { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { MoveCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof MoveCardSchema>;\ntype ReturnType = ActionState<InputType, Card>;\n\nexport const moveCard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { boardId, cardId, listId } = data;\n\n  try {\n    // Get the card before updating\n    const cardToBeMoved = await prisma.card.findUnique({\n      where: {\n        id: cardId,\n        list: {\n          boardId,\n        },\n      },\n    });\n\n    if (!cardToBeMoved) {\n      return {\n        error: \"Card not found\",\n      };\n    }\n\n    // Check if the destination list exists and belongs to the board\n    const destinationList = await prisma.list.findUnique({\n      where: {\n        id: listId,\n        boardId,\n      },\n    });\n\n    if (!destinationList) {\n      return {\n        error: \"Destination list not found\",\n      };\n    }\n\n    // If moving to the same list, don't do anything\n    if (cardToBeMoved.listId === listId) {\n      return {\n        data: cardToBeMoved,\n      };\n    }\n\n    // Get the source list title for audit log\n    const sourceList = await prisma.list.findUnique({\n      where: {\n        id: cardToBeMoved.listId,\n      },\n      select: {\n        title: true,\n      },\n    });\n\n    // Get all cards in the destination list\n    const lastCardInList = await prisma.card.findFirst({\n      where: {\n        listId,\n      },\n      orderBy: {\n        order: 'desc',\n      },\n    });\n\n    const newOrder = lastCardInList ? lastCardInList.order + 1 : 0;\n\n    // Update the card\n    const updatedCard = await prisma.card.update({\n      where: {\n        id: cardId,\n      },\n      data: {\n        listId,\n        order: newOrder,\n      },\n    });\n\n    // Create audit log\n    await createAuditLog({\n      entityId: updatedCard.id,\n      entityTitle: updatedCard.title,\n      entityType: \"CARD\",\n      action: \"UPDATE\",\n      boardId,\n      valueBefore: `List: ${sourceList?.title || \"Unknown\"}`,\n      valueAfter: `List: ${destinationList.title}`,\n    });\n\n    return { data: updatedCard };\n  } catch (error) {\n    console.log(\"[MOVE_CARD_ERROR]\", error);\n    return {\n      error: \"Failed to move card.\"\n    }\n  }\n};\n\u0005End File\u0006# frontend/src/actions/copy-list/index.ts\nimport { z } from 'zod';\nimport { List } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { CopyListSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof CopyListSchema>;\ntype ReturnType = ActionState<InputType, List>;\n\nexport const copyList = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { id, boardId } = data;\n\n  try {\n    const listToCopy = await prisma.list.findUnique({\n      where: {\n        id,\n        boardId,\n      },\n      include: {\n        cards: {\n          orderBy: {\n            order: 'asc',\n          },\n        },\n      },\n    });\n\n    if (!listToCopy) {\n      return {\n        error: \"List not found\",\n      };\n    }\n\n    const lastList = await prisma.list.findFirst({\n      where: { boardId },\n      orderBy: { order: 'desc' },\n    });\n\n    const newOrder = lastList ? lastList.order + 1 : 0;\n\n    const copiedList = await prisma.list.create({\n      data: {\n        boardId: listToCopy.boardId,\n        title: `${listToCopy.title} - Copy`,\n        order: newOrder,\n      },\n    });\n\n    // Copy all cards from the original list\n    if (listToCopy.cards.length) {\n      const cardsToCreate = listToCopy.cards.map((card, index) => ({\n        title: card.title,\n        description: card.description,\n        order: index,\n        listId: copiedList.id,\n      }));\n\n      await prisma.card.createMany({\n        data: cardsToCreate,\n      });\n    }\n\n    // Create audit log\n    await createAuditLog({\n      entityId: copiedList.id,\n      entityTitle: copiedList.title,\n      entityType: \"LIST\",\n      action: \"CREATE\",\n      boardId,\n    });\n\n    return { data: copiedList };\n  } catch (error) {\n    console.log(\"[COPY_LIST_ERROR]\", error);\n    return {\n      error: \"Failed to copy list.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { DeleteCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof DeleteCardSchema>;\ntype ReturnType = ActionState<InputType, Card>;\n\nexport const deleteCard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { id, boardId } = data;\n\n  try {\n    const cardToDelete = await prisma.card.findUnique({\n      where: {\n        id,\n        list: {\n          boardId,\n        },\n      },\n    });\n\n    if (!cardToDelete) {\n      return {\n        error: \"Card not found\",\n      };\n    }\n\n    // Create audit log entry before deletion\n    await createAuditLog({\n      entityId: cardToDelete.id,\n      entityTitle: cardToDelete.title,\n      entityType: \"CARD\",\n      action: \"DELETE\",\n      boardId,\n    });\n\n    const deletedCard = await prisma.card.delete({\n      where: {\n        id,\n      },\n    });\n\n    return { data: deletedCard };\n  } catch (error) {\n    console.log(\"[DELETE_CARD_ERROR]\", error);\n    return {\n      error: \"Failed to delete card.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { UpdateCardOrderSchema } from './schema';\n\ntype InputType = z.infer<typeof UpdateCardOrderSchema>;\ntype ReturnType = ActionState<InputType, Card[]>;\n\nexport const updateCardOrder = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { items, boardId } = data;\n\n  try {\n    // Create an array of update operations\n    const transaction = items.map((card) => \n      prisma.card.update({\n        where: {\n          id: card.id,\n          list: {\n            boardId: boardId,\n          },\n        },\n        data: {\n          order: card.order,\n          listId: card.listId,\n        },\n      })\n    );\n\n    // Execute all update operations in a transaction\n    const updatedCards = await prisma.$transaction(transaction);\n\n    return { data: updatedCards };\n  } catch (error) {\n    console.log(\"[UPDATE_CARD_ORDER_ERROR]\", error);\n    return {\n      error: \"Failed to update card order.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { CreateCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof CreateCardSchema>;\ntype ReturnType = ActionState<InputType, Card>;\n\nexport const createCard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { title, listId, boardId } = data;\n\n  try {\n    const list = await prisma.list.findUnique({\n      where: {\n        id: listId,\n        boardId,\n      },\n    });\n\n    if (!list) {\n      return {\n        error: \"List not found\",\n      };\n    }\n\n    const lastCard = await prisma.card.findFirst({\n      where: { listId },\n      orderBy: { order: 'desc' },\n    });\n\n    const newOrder = lastCard ? lastCard.order + 1 : 0;\n\n    const card = await prisma.card.create({\n      data: {\n        title,\n        listId,\n        order: newOrder,\n      },\n    });\n\n    // Create audit log\n    await createAuditLog({\n      entityId: card.id,\n      entityTitle: card.title,\n      entityType: \"CARD\",\n      action: \"CREATE\",\n      boardId,\n    });\n\n    return { data: card };\n  } catch (error) {\n    console.log(\"[CREATE_CARD_ERROR]\", error);\n    return {\n      error: \"Failed to create card.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/actions/create-list/index.ts\nimport { z } from 'zod';\nimport { List } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { CreateListSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof CreateListSchema>;\ntype ReturnType = ActionState<InputType, List>;\n\nexport const createList = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { title, boardId } = data;\n\n  try {\n    const board = await prisma.board.findUnique({\n      where: {\n        id: boardId,\n      },\n    });\n\n    if (!board) {\n      return {\n        error: \"Board not found\",\n      };\n    }\n\n    const lastList = await prisma.list.findFirst({\n      where: { boardId: boardId },\n      orderBy: { order: 'desc' },\n    });\n\n    const newOrder = lastList ? lastList.order + 1 : 0;\n\n    const list = await prisma.list.create({\n      data: {\n        title,\n        boardId,\n        order: newOrder,\n      },\n    });\n\n    // Create audit log\n    await createAuditLog({\n      entityId: list.id,\n      entityTitle: list.title,\n      entityType: \"LIST\",\n      action: \"CREATE\",\n      boardId,\n    });\n\n    return { data: list };\n  } catch (error) {\n    console.log(\"[CREATE_LIST_ERROR]\", error);\n    return {\n      error: \"Failed to create list.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { CopyCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof CopyCardSchema>;\ntype ReturnType = ActionState<InputType, Card>;\n\nexport const copyCard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { id, boardId } = data;\n\n  try {\n    const cardToCopy = await prisma.card.findUnique({\n      where: {\n        id,\n        list: {\n          boardId,\n        },\n      },\n    });\n\n    if (!cardToCopy) {\n      return {\n        error: \"Card not found\",\n      };\n    }\n\n    const lastCardInList = await prisma.card.findFirst({\n      where: { listId: cardToCopy.listId },\n      orderBy: { order: 'desc' },\n    });\n\n    const newOrder = lastCardInList ? lastCardInList.order + 1 : 0;\n\n    const copiedCard = await prisma.card.create({\n      data: {\n        title: `${cardToCopy.title} - Copy`,\n        description: cardToCopy.description,\n        order: newOrder,\n        listId: cardToCopy.listId,\n      },\n    });\n\n    // Create audit log\n    await createAuditLog({\n      entityId: copiedCard.id,\n      entityTitle: copiedCard.title,\n      entityType: \"CARD\",\n      action: \"CREATE\",\n      boardId,\n    });\n\n    return { data: copiedCard };\n  } catch (error) {\n    console.log(\"[COPY_CARD_ERROR]\", error);\n    return {\n      error: \"Failed to copy card.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from \"zod\";\nimport { Board } from \"@prisma/client\";\n\nimport { ActionState } from \"@/lib/create-safe-action\";\nimport { prisma } from \"@/lib/db\";\nimport { CreateBoardSchema } from \"./schema\";\nimport { createAuditLog } from \"@/lib/create-audit-log\";\n\ntype InputType = z.infer<typeof CreateBoardSchema>;\ntype ReturnType = ActionState<InputType, Board>;\n\nexport const createBoard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { title, image, visibility = \"private\" } = data;\n\n  try {\n    // Extract image details\n    let imageId, imageThumbUrl, imageFullUrl, imageLinkHTML, imageUserName;\n\n    if (image) {\n      // Format: \"imageId|thumbUrl|fullUrl|linkHTML|userName\"\n      [imageId, imageThumbUrl, imageFullUrl, imageLinkHTML, imageUserName] = image.split(\"|\");\n    }\n\n    const board = await prisma.board.create({\n      data: {\n        title,\n        visibility,\n        imageId,\n        imageThumbUrl,\n        imageFullUrl,\n        imageLinkHTML,\n        imageUserName,\n      },\n    });\n\n    // Create audit log for board creation\n    await createAuditLog({\n      entityId: board.id,\n      entityTitle: board.title,\n      entityType: \"BOARD\",\n      action: \"CREATE\",\n    });\n\n    return { data: board };\n  } catch (error) {\n    console.log(\"[CREATE_BOARD_ERROR]\", error);\n    return {\n      error: \"Failed to create board.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { List } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { DeleteListSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof DeleteListSchema>;\ntype ReturnType = ActionState<InputType, List>;\n\nexport const deleteList = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { id, boardId } = data;\n\n  try {\n    // Find the list to delete\n    const listToDelete = await prisma.list.findUnique({\n      where: {\n        id,\n        boardId,\n      },\n      include: {\n        cards: true,\n      },\n    });\n\n    if (!listToDelete) {\n      return {\n        error: \"List not found\",\n      };\n    }\n\n    // Create audit log before deletion\n    await createAuditLog({\n      entityId: listToDelete.id,\n      entityTitle: listToDelete.title,\n      entityType: \"LIST\",\n      action: \"DELETE\",\n      boardId,\n    });\n\n    // Delete the list and its cards (cascading delete is handled by Prisma)\n    const deletedList = await prisma.list.delete({\n      where: {\n        id,\n      },\n    });\n\n    return { data: deletedList };\n  } catch (error) {\n    console.log(\"[DELETE_LIST_ERROR]\", error);\n    return {\n      error: \"Failed to delete list.\"\n    }\n  }\n};\n\u0005End File\u0006# frontend/src/actions/update-list-order/index.ts\nimport { z } from 'zod';\nimport { List } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { UpdateListOrderSchema } from './schema';\n\ntype InputType = z.infer<typeof UpdateListOrderSchema>;\ntype ReturnType = ActionState<InputType, List[]>;\n\nexport const updateListOrder = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { items, boardId } = data;\n\n  try {\n    // Create an array of update operations\n    const transaction = items.map((list) => \n      prisma.list.update({\n        where: {\n          id: list.id,\n          boardId: boardId,\n        },\n        data: {\n          order: list.order,\n        },\n      })\n    );\n\n    // Execute all update operations in a transaction\n    const updatedLists = await prisma.$transaction(transaction);\n\n    return { data: updatedLists };\n  } catch (error) {\n    console.log(\"[UPDATE_LIST_ORDER_ERROR]\", error);\n    return {\n      error: \"Failed to update list order.\"\n    }\n  }\n};\n\u0005End File\u0006import { z } from 'zod';\nimport { Card } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { UpdateCardSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof UpdateCardSchema>;\ntype ReturnType = ActionState<InputType, Card>;\n\nexport const updateCard = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { id, boardId, ...values } = data;\n\n  try {\n    // Get the card before updating\n    const cardToUpdate = await prisma.card.findUnique({\n      where: {\n        id,\n        list: {\n          boardId,\n        },\n      },\n    });\n\n    if (!cardToUpdate) {\n      return {\n        error: \"Card not found\",\n      };\n    }\n\n    // Determine what field is being updated for audit log\n    let fieldName = \"\";\n    let valueBefore = null;\n    let valueAfter = null;\n\n    if (values.title !== undefined && values.title !== cardToUpdate.title) {\n      fieldName = \"title\";\n      valueBefore = cardToUpdate.title;\n      valueAfter = values.title;\n    } else if (\n      values.description !== undefined &&\n      values.description !== cardToUpdate.description\n    ) {\n      fieldName = \"description\";\n      valueBefore = cardToUpdate.description;\n      valueAfter = values.description;\n    } else if (\n      values.completed !== undefined &&\n      values.completed !== cardToUpdate.completed\n    ) {\n      fieldName = \"status\";\n      valueBefore = cardToUpdate.completed ? \"completed\" : \"incomplete\";\n      valueAfter = values.completed ? \"completed\" : \"incomplete\";\n    }\n\n    // Update the card\n    const updatedCard = await prisma.card.update({\n      where: {\n        id,\n      },\n      data: {\n        ...values,\n      },\n    });\n\n    // Create audit log if anything changed\n    if (fieldName) {\n      await createAuditLog({\n        entityId: updatedCard.id,\n        entityTitle: updatedCard.title,\n        entityType: \"CARD\",\n        action: fieldName === \"status\" && values.completed ? \"COMPLETED\" : \"UPDATE\",\n        boardId,\n        valueBefore,\n        valueAfter,\n      });\n    }\n\n    return { data: updatedCard };\n  } catch (error) {\n    console.log(\"[UPDATE_CARD_ERROR]\", error);\n    return {\n      error: \"Failed to update card.\"\n    }\n  }\n};\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { z } from 'zod';\nimport { List } from '@prisma/client';\n\nimport { ActionState } from '@/lib/create-safe-action';\nimport { prisma } from '@/lib/db';\nimport { UpdateListSchema } from './schema';\nimport { createAuditLog } from '@/lib/create-audit-log';\n\ntype InputType = z.infer<typeof UpdateListSchema>;\ntype ReturnType = ActionState<InputType, List>;\n\nexport const updateList = async (\n  data: InputType\n): Promise<ReturnType> => {\n  const { title, id, boardId } = data;\n\n  try {\n    // Get the list before updating\n    const listToUpdate = await prisma.list.findUnique({\n      where: {\n        id,\n        boardId,\n      },\n    });\n\n    if (!listToUpdate) {\n      return {\n        error: \"List not found\",\n      };\n    }\n\n    const updatedList = await prisma.list.update({\n      where: {\n        id,\n        boardId,\n      },\n      data: {\n        title,\n      },\n    });\n\n    // Create audit log only if title has changed\n    if (listToUpdate.title !== title) {\n      await createAuditLog({\n        entityId: updatedList.id,\n        entityTitle: updatedList.title,\n        entityType: \"LIST\",\n        action: \"UPDATE\",\n        boardId,\n        valueBefore: listToUpdate.title,\n        valueAfter: updatedList.title,\n      });\n    }\n\n    return { data: updatedList };\n  } catch (error) {\n    console.log(\"[UPDATE_LIST_ERROR]\", error);\n    return {\n      error: \"Failed to update list.\"\n    }\n  }\n};\n\u0005End File\u0006# frontend/src/lib/create-audit-log.ts\nimport { auth } from \"@/lib/auth\";\nimport { prisma } from \"@/lib/db\";\n\ntype EntityType = \"BOARD\" | \"LIST\" | \"CARD\" | \"USER\";\ntype ActionType = \"CREATE\" | \"UPDATE\" | \"DELETE\" | \"COMPLETED\";\n\ninterface CreateAuditLogProps {\n  entityId: string;\n  entityType: EntityType;\n  entityTitle: string;\n  action: ActionType | string;\n  boardId?: string;\n  valueBefore?: string | null;\n  valueAfter?: string | null;\n}\n\nexport const createAuditLog = async ({\n  entityId,\n  entityType,\n  entityTitle,\n  action,\n  boardId,\n  valueBefore,\n  valueAfter,\n}: CreateAuditLogProps) => {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    await prisma.auditLog.create({\n      data: {\n        entityId,\n        entityTitle,\n        entity: entityType,\n        action,\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n        boardId,\n        valueBefore,\n        valueAfter,\n      },\n    });\n  } catch (error) {\n    console.error(\"[AUDIT_LOG_ERROR]\", error);\n  }\n};\n\u0005End File\u0006import { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\n/**\n * Get all boards for the authenticated user\n */\nexport async function GET(\n  req: Request\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    // Extract query parameters\n    const url = new URL(req.url);\n    const visibility = url.searchParams.get('visibility') as string | undefined;\n    const limit = url.searchParams.get('limit') ? parseInt(url.searchParams.get('limit')!) : undefined;\n    const page = url.searchParams.get('page') ? parseInt(url.searchParams.get('page')!) : undefined;\n\n    // Build the where clause based on query parameters\n    const where: any = {};\n    \n    if (visibility) {\n      where.visibility = visibility;\n    }\n\n    // Get boards with pagination\n    const boards = await prisma.board.findMany({\n      where,\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n      skip: page && limit ? (page - 1) * limit : undefined,\n    });\n\n    return NextResponse.json({ boards });\n  } catch (error) {\n    console.log('[BOARDS_GET]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\n/**\n * Create a new board\n */\nexport async function POST(\n  req: Request\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    const body = await req.json();\n    const { title, visibility = 'private', image } = body;\n\n    if (!title) {\n      return new NextResponse(\"Title is required\", { status: 400 });\n    }\n\n    // Extract image details if provided\n    let imageId, imageThumbUrl, imageFullUrl, imageLinkHTML, imageUserName;\n\n    if (image) {\n      // Format: \"imageId|thumbUrl|fullUrl|linkHTML|userName\"\n      [imageId, imageThumbUrl, imageFullUrl, imageLinkHTML, imageUserName] = image.split(\"|\");\n    }\n\n    // Create the board\n    const board = await prisma.board.create({\n      data: {\n        title,\n        visibility,\n        imageId,\n        imageThumbUrl,\n        imageFullUrl,\n        imageLinkHTML,\n        imageUserName,\n        userId: user.id,\n      }\n    });\n\n    // Create audit log\n    await prisma.auditLog.create({\n      data: {\n        entityId: board.id,\n        entityTitle: board.title,\n        entity: 'BOARD',\n        action: 'CREATE',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      }\n    });\n\n    return NextResponse.json({ board });\n  } catch (error) {\n    console.log('[BOARDS_POST]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\n# frontend/src/app/api/metrics/cards/route.ts\nimport { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\nexport async function GET(\n  req: Request\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    // Get total card count\n    const totalCards = await prisma.card.count();\n\n    // Get completed cards count\n    const completedCards = await prisma.card.count({\n      where: {\n        completed: true\n      }\n    });\n\n    // Get cards created in the last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const recentCards = await prisma.card.count({\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo\n        }\n      }\n    });\n\n    // Get cards by status (completed vs not completed)\n    const incompleteCards = totalCards - completedCards;\n\n    // Get boards with most cards\n    const boardsWithMostCards = await prisma.board.findMany({\n      select: {\n        id: true,\n        title: true,\n        _count: {\n          select: {\n            lists: {\n              select: {\n                cards: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: {\n        lists: {\n          _count: 'desc'\n        }\n      },\n      take: 5\n    });\n\n    // Get distribution of cards across lists\n    const listsWithCardCounts = await prisma.list.findMany({\n      select: {\n        id: true,\n        title: true,\n        _count: {\n          select: {\n            cards: true\n          }\n        }\n      },\n      orderBy: {\n        cards: {\n          _count: 'desc'\n        }\n      },\n      take: 10\n    });\n\n    return NextResponse.json({\n      totalCards,\n      completedCards,\n      incompleteCards,\n      recentCards,\n      boardsWithMostCards,\n      listsWithCardCounts\n    });\n  } catch (error) {\n    console.log('[CARD_METRICS_GET]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# frontend/src/app/api/auth/signin/route.ts\nimport { NextResponse } from 'next/server';\nimport { headers } from 'next/headers';\nimport { prisma } from '@/lib/db';\nimport { lucia } from '@/lib/auth';\n\n// Sign in route\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { email, password } = body;\n\n    // Validate input\n    if (!email || !password) {\n      return NextResponse.json(\n        { message: 'Missing email or password' },\n        { status: 400 }\n      );\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'Invalid email or password' },\n        { status: 400 }\n      );\n    }\n\n    // Verify password\n    if (!user.hashedPassword) {\n      return NextResponse.json(\n        { message: 'Invalid login method' },\n        { status: 400 }\n      );\n    }\n\n    const validPassword = await Bun.password.verify(\n      password,\n      user.hashedPassword\n    );\n\n    if (!validPassword) {\n      return NextResponse.json(\n        { message: 'Invalid email or password' },\n        { status: 400 }\n      );\n    }\n\n    // Create session\n    const session = await lucia.createSession(user.id, {});\n    const sessionCookie = lucia.createSessionCookie(session.id);\n\n    // Create audit log for login\n    await prisma.auditLog.create({\n      data: {\n        entityId: user.id,\n        entityTitle: user.email,\n        entity: 'USER',\n        action: 'LOGIN',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      },\n    });\n\n    // Return session cookie\n    return NextResponse.json(\n      {\n        message: 'Signed in successfully',\n      },\n      {\n        status: 200,\n        headers: {\n          'Set-Cookie': sessionCookie.serialize(),\n        },\n      }\n    );\n  } catch (error) {\n    console.error('[SIGNIN_ERROR]', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\u0005End File\u0006# frontend/src/app/api/auth/reset-password/route.ts\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\nimport crypto from 'crypto';\nimport { sendPasswordResetEmail } from '@/lib/email';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { email } = body;\n\n    if (!email) {\n      return NextResponse.json(\n        { message: 'Email is required' },\n        { status: 400 }\n      );\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n\n    // Don't reveal if the user exists or not for security reasons\n    if (!user) {\n      return NextResponse.json(\n        { message: 'If the email exists, a reset link has been sent' },\n        { status: 200 }\n      );\n    }\n\n    // Generate a reset token\n    const token = crypto.randomBytes(32).toString('hex');\n    const expires = new Date();\n    expires.setHours(expires.getHours() + 1); // Token expires in 1 hour\n\n    // Save the reset token\n    await prisma.passwordReset.create({\n      data: {\n        email,\n        token,\n        expires,\n      },\n    });\n\n    // Send password reset email\n    await sendPasswordResetEmail(email, token);\n\n    // Create audit log for password reset request\n    await prisma.auditLog.create({\n      data: {\n        entityId: user.id,\n        entityTitle: user.email,\n        entity: 'USER',\n        action: 'PASSWORD_RESET_REQUEST',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      },\n    });\n\n    return NextResponse.json(\n      { message: 'If the email exists, a reset link has been sent' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('[RESET_PASSWORD_ERROR]', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { password, token } = body;\n\n    if (!password || !token) {\n      return NextResponse.json(\n        { message: 'Password and token are required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate password\n    if (password.length < 8) {\n      return NextResponse.json(\n        { message: 'Password must be at least 8 characters long' },\n        { status: 400 }\n      );\n    }\n\n    // Find the password reset record\n    const passwordReset = await prisma.passwordReset.findUnique({\n      where: {\n        token,\n      },\n    });\n\n    if (!passwordReset) {\n      return NextResponse.json(\n        { message: 'Invalid or expired token' },\n        { status: 400 }\n      );\n    }\n\n    // Check if the token is expired\n    if (new Date() > passwordReset.expires) {\n      await prisma.passwordReset.delete({\n        where: {\n          token,\n        },\n      });\n      return NextResponse.json(\n        { message: 'Token has expired' },\n        { status: 400 }\n      );\n    }\n\n    // Find the user by email\n    const user = await prisma.user.findUnique({\n      where: {\n        email: passwordReset.email,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    // Hash the new password\n    const hashedPassword = await Bun.password.hash(password);\n\n    // Update the user's password\n    await prisma.user.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        hashedPassword,\n      },\n    });\n\n    // Delete the password reset record\n    await prisma.passwordReset.delete({\n      where: {\n        token,\n      },\n    });\n\n    // Create audit log for password reset\n    await prisma.auditLog.create({\n      data: {\n        entityId: user.id,\n        entityTitle: user.email,\n        entity: 'USER',\n        action: 'PASSWORD_RESET',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      },\n    });\n\n    return NextResponse.json(\n      { message: 'Password has been reset successfully' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('[NEW_PASSWORD_ERROR]', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\n/**\n * Get audit logs for a specific card\n */\nexport async function GET(\n  req: Request,\n  { params }: { params: { cardId: string } }\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    const { cardId } = params;\n\n    if (!cardId) {\n      return new NextResponse(\"Card ID is required\", { status: 400 });\n    }\n\n    // Check if the card exists and the user has access to it\n    const card = await prisma.card.findUnique({\n      where: {\n        id: cardId,\n      },\n      include: {\n        list: {\n          select: {\n            boardId: true,\n          },\n        },\n      },\n    });\n\n    if (!card) {\n      return new NextResponse(\"Card not found\", { status: 404 });\n    }\n\n    // Get audit logs for the card\n    const logs = await prisma.auditLog.findMany({\n      where: {\n        entityId: cardId,\n        entity: 'CARD',\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    return NextResponse.json({ logs });\n  } catch (error) {\n    console.log('[CARD_LOGS_GET]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# frontend/src/app/api/admin/users/route.ts\nimport { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\n// Get all users (admin only)\nexport async function GET(req: Request) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    // Check if user is admin\n    if (user.role !== 'admin') {\n      return new NextResponse(\"Forbidden\", { status: 403 });\n    }\n\n    // Get all users\n    const users = await prisma.user.findMany({\n      orderBy: {\n        createdAt: 'desc'\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        image: true,\n        role: true,\n        createdAt: true,\n        updatedAt: true,\n      }\n    });\n\n    return NextResponse.json({ users });\n  } catch (error) {\n    console.log('[ADMIN_USERS_GET]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\n// Create a new user (admin only)\nexport async function POST(req: Request) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    // Check if user is admin\n    if (user.role !== 'admin') {\n      return new NextResponse(\"Forbidden\", { status: 403 });\n    }\n\n    const body = await req.json();\n    const { name, email, password, role } = body;\n\n    // Validate input\n    if (!email || !password) {\n      return NextResponse.json({ message: \"Email and password are required\" }, { status: 400 });\n    }\n\n    // Check if email already exists\n    const existingUser = await prisma.user.findUnique({\n      where: {\n        email\n      }\n    });\n\n    if (existingUser) {\n      return NextResponse.json({ message: \"Email already in use\" }, { status: 400 });\n    }\n\n    // Hash password\n    const hashedPassword = await Bun.password.hash(password);\n\n    // Create new user\n    const newUser = await prisma.user.create({\n      data: {\n        name,\n        email,\n        hashedPassword,\n        role: role || 'user',\n      }\n    });\n\n    // Create audit log\n    await prisma.auditLog.create({\n      data: {\n        entityId: newUser.id,\n        entityTitle: newUser.email,\n        entity: 'USER',\n        action: 'CREATE',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      }\n    });\n\n    return NextResponse.json({ \n      user: {\n        id: newUser.id,\n        name: newUser.name,\n        email: newUser.email,\n        role: newUser.role,\n        createdAt: newUser.createdAt,\n        updatedAt: newUser.updatedAt,\n      }\n    });\n  } catch (error) {\n    console.log('[ADMIN_USERS_POST]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\nimport { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\n// Update user role (admin only)\nexport async function PATCH(\n  req: Request,\n  { params }: { params: { userId: string } }\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    // Check if user is admin\n    if (user.role !== 'admin') {\n      return new NextResponse(\"Forbidden\", { status: 403 });\n    }\n\n    const { userId } = params;\n    const body = await req.json();\n    const { role } = body;\n\n    // Validate input\n    if (!role || !['admin', 'user'].includes(role)) {\n      return NextResponse.json({ message: \"Invalid role\" }, { status: 400 });\n    }\n\n    // Check if user exists\n    const userToUpdate = await prisma.user.findUnique({\n      where: {\n        id: userId\n      }\n    });\n\n    if (!userToUpdate) {\n      return NextResponse.json({ message: \"User not found\" }, { status: 404 });\n    }\n\n    // Update user role\n    const updatedUser = await prisma.user.update({\n      where: {\n        id: userId\n      },\n      data: {\n        role\n      }\n    });\n\n    // Create audit log\n    await prisma.auditLog.create({\n      data: {\n        entityId: updatedUser.id,\n        entityTitle: updatedUser.email,\n        entity: 'USER',\n        action: 'UPDATE',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n        valueBefore: userToUpdate.role,\n        valueAfter: role\n      }\n    });\n\n    return NextResponse.json({ \n      user: {\n        id: updatedUser.id,\n        name: updatedUser.name,\n        email: updatedUser.email,\n        role: updatedUser.role\n      }\n    });\n  } catch (error) {\n    console.log('[ADMIN_USER_ROLE_PATCH]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# frontend/src/app/api/users/me/route.ts\nimport { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/db';\n\n/**\n * Update the current user profile\n */\nexport async function PATCH(\n  req: Request\n) {\n  try {\n    const user = await auth();\n\n    if (!user) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    const body = await req.json();\n    const { name, email, password, currentPassword } = body;\n\n    // Prepare data for update\n    const updateData: any = {};\n\n    // Update name if provided\n    if (name !== undefined) {\n      updateData.name = name;\n    }\n\n    // Update email if provided\n    if (email !== undefined && email !== user.email) {\n      // Check if email is already in use\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          email,\n          NOT: {\n            id: user.id\n          }\n        }\n      });\n\n      if (existingUser) {\n        return NextResponse.json({\n          message: \"Email already in use\"\n        }, { status: 400 });\n      }\n\n      updateData.email = email;\n    }\n\n    // Update password if provided\n    if (password && currentPassword) {\n      // Verify current password\n      const dbUser = await prisma.user.findUnique({\n        where: {\n          id: user.id\n        }\n      });\n\n      if (!dbUser?.hashedPassword) {\n        return NextResponse.json({\n          message: \"Cannot update password for this account type\"\n        }, { status: 400 });\n      }\n\n      const isValid = await Bun.password.verify(currentPassword, dbUser.hashedPassword);\n\n      if (!isValid) {\n        return NextResponse.json({\n          message: \"Current password is incorrect\"\n        }, { status: 400 });\n      }\n\n      // Hash and set new password\n      updateData.hashedPassword = await Bun.password.hash(password);\n    }\n\n    // If nothing to update, return early\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json({\n        message: \"No changes to update\"\n      }, { status: 400 });\n    }\n\n    // Update user\n    const updatedUser = await prisma.user.update({\n      where: {\n        id: user.id\n      },\n      data: updateData\n    });\n\n    // Create audit log\n    await prisma.auditLog.create({\n      data: {\n        entityId: updatedUser.id,\n        entityTitle: updatedUser.email,\n        entity: 'USER',\n        action: 'UPDATE',\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        userImageUrl: user.image,\n      }\n    });\n\n    return NextResponse.json({\n      user: {\n        id: updatedUser.id,\n        name: updatedUser.name,\n        email: updatedUser.email,\n        role: updatedUser.role,\n        image: updatedUser.image,\n      }\n    });\n  } catch (error) {\n    console.log('[USER_UPDATE_ERROR]', error);\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n\u0005End File\u0006# backend/config/routes.php\n<?php\n\ndeclare(strict_types=1);\n\nuse App\\Controller\\BoardController;\nuse App\\Controller\\CardController;\nuse App\\Controller\\ListController;\nuse App\\Controller\\UserController;\nuse App\\Controller\\AuthController;\nuse App\\Controller\\FileController;\nuse App\\Controller\\UploadedFileController;\nuse App\\Controller\\AuditLogController;\nuse App\\Controller\\MetricsController;\nuse App\\Controller\\AdminController;\nuse Slim\\App;\nuse Slim\\Routing\\RouteCollectorProxy;\nuse Tuupola\\Middleware\\JwtAuthentication;\nuse Slim\\Middleware\\SessionMiddleware;\n\nreturn function (App $app) {\n    $app->options('/{routes:.*}', function ($request, $response, $args) {\n        return $response;\n    });\n\n    // Enable CORS for all routes\n    $app->add(function ($request, $handler) {\n        $response = $handler->handle($request);\n        return $response\n            ->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')\n            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');\n    });\n\n    // Public routes (no authentication required)\n    $app->group('/api', function (RouteCollectorProxy $group) {\n        // Auth routes\n        $group->post('/auth/signup', [AuthController::class, 'register']);\n        $group->post('/auth/signin', [AuthController::class, 'login']);\n        $group->post('/auth/signout', [AuthController::class, 'logout']);\n        $group->post('/auth/reset-password', [AuthController::class, 'requestPasswordReset']);\n        $group->post('/auth/new-password', [AuthController::class, 'resetPassword']);\n        $group->get('/auth/validate-token', [AuthController::class, 'validateToken']);\n        $group->get('/auth/me', [AuthController::class, 'getCurrentUser']);\n\n        // Protected routes (require authentication)\n        $group->group('', function (RouteCollectorProxy $group) {\n            // User routes\n            $group->patch('/users/me', [UserController::class, 'updateCurrentUser']);\n\n            // Board routes\n            $group->get('/boards', [BoardController::class, 'getAll']);\n            $group->post('/boards', [BoardController::class, 'create']);\n            $group->get('/boards/{id}', [BoardController::class, 'getById']);\n            $group->patch('/boards/{id}', [BoardController::class, 'update']);\n            $group->delete('/boards/{id}', [BoardController::class, 'delete']);\n            $group->post('/boards/{id}/duplicate', [BoardController::class, 'duplicate']);\n            $group->get('/boards/{id}/logs', [AuditLogController::class, 'getBoardLogs']);\n\n            // List routes\n            $group->get('/boards/{boardId}/lists', [ListController::class, 'getByBoardId']);\n            $group->post('/lists', [ListController::class, 'create']);\n            $group->patch('/lists/{id}', [ListController::class, 'update']);\n            $group->delete('/lists/{id}', [ListController::class, 'delete']);\n            $group->post('/lists/{id}/copy', [ListController::class, 'copy']);\n            $group->patch('/lists/order', [ListController::class, 'updateOrder']);\n\n            // Card routes\n            $group->get('/cards/{id}', [CardController::class, 'getById']);\n            $group->post('/cards', [CardController::class, 'create']);\n            $group->patch('/cards/{id}', [CardController::class, 'update']);\n            $group->delete('/cards/{id}', [CardController::class, 'delete']);\n            $group->post('/cards/{id}/copy', [CardController::class, 'copy']);\n            $group->patch('/cards/order', [CardController::class, 'updateOrder']);\n            $group->post('/cards/{id}/move', [CardController::class, 'move']);\n            $group->get('/cards/{id}/logs', [AuditLogController::class, 'getCardLogs']);\n\n            // Audit logs\n            $group->get('/audit-logs', [AuditLogController::class, 'getAll']);\n\n            // Metrics\n            $group->get('/metrics/boards', [MetricsController::class, 'getBoardMetrics']);\n            $group->get('/metrics/lists', [MetricsController::class, 'getListMetrics']);\n            $group->get('/metrics/cards', [MetricsController::class, 'getCardMetrics']);\n\n            // Admin routes\n            $group->group('/admin', function (RouteCollectorProxy $group) {\n                // User management\n                $group->get('/users', [AdminController::class, 'getAllUsers']);\n                $group->post('/users', [AdminController::class, 'createUser']);\n                $group->get('/users/{id}', [AdminController::class, 'getUserById']);\n                $group->patch('/users/{id}', [AdminController::class, 'updateUser']);\n                $group->delete('/users/{id}', [AdminController::class, 'deleteUser']);\n                $group->patch('/users/{id}/role', [AdminController::class, 'updateUserRole']);\n\n                // System metrics\n                $group->get('/metrics', [AdminController::class, 'getSystemMetrics']);\n            })->add(function ($request, $handler) {\n                // Check if user is admin\n                $user = $request->getAttribute('user');\n                if (!$user || $user['role'] !== 'admin') {\n                    $response = new \\Slim\\Psr7\\Response();\n                    return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n                }\n                return $handler->handle($request);\n            });\n\n        })->add(function ($request, $handler) {\n            // Middleware to check authentication\n            $userId = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;\n            \n            if (!$userId) {\n                $response = new \\Slim\\Psr7\\Response();\n                return $response->withStatus(401)\n                    ->withHeader('Content-Type', 'application/json');\n            }\n            \n            // Get user from database\n            $db = $request->getAttribute('database');\n            $user = $db->fetchAssoc('SELECT * FROM users WHERE id = ?', [$userId]);\n            \n            if (!$user) {\n                // Invalid user ID in session\n                unset($_SESSION['user_id']);\n                $response = new \\Slim\\Psr7\\Response();\n                return $response->withStatus(401)\n                    ->withHeader('Content-Type', 'application/json');\n            }\n            \n            // Add user to request attributes\n            $request = $request->withAttribute('user', $user);\n            \n            return $handler->handle($request);\n        });\n    });\n\n    $app->add(SessionMiddleware::class);\n};\n\u0005End File\u0006# Chrisley304/trello-clone\n<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass UserController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getAll(Request $request, Response $response, array $args): Response\n    {\n        $users = $this->db->fetchAll('SELECT id, name, email, role, createdAt, updatedAt FROM users');\n        $response->getBody()->write(json_encode(['users' => $users]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getById(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $this->db->fetchAssoc('SELECT id, name, email, role, createdAt, updatedAt FROM users WHERE id = ?', [$id]);\n\n        if (!$user) {\n            $response->getBody()->write(json_encode(['message' => 'User not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        $response->getBody()->write(json_encode(['user' => $user]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function updateCurrentUser(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        $data = $request->getParsedBody();\n        \n        // Fields that can be updated\n        $allowedFields = ['name', 'email', 'password', 'currentPassword'];\n        $updateData = [];\n        $updateFields = [];\n        \n        // Check if email already exists (if trying to change email)\n        if (isset($data['email']) && $data['email'] !== $user['email']) {\n            $existingUser = $this->db->fetchAssoc('SELECT id FROM users WHERE email = ? AND id != ?', [$data['email'], $user['id']]);\n            if ($existingUser) {\n                $response->getBody()->write(json_encode(['message' => 'Email already in use']));\n                return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n            }\n            \n            $updateData[] = $data['email'];\n            $updateFields[] = 'email = ?';\n        }\n        \n        // Update name if provided\n        if (isset($data['name'])) {\n            $updateData[] = $data['name'];\n            $updateFields[] = 'name = ?';\n        }\n        \n        // Update password if provided\n        if (isset($data['password']) && isset($data['currentPassword'])) {\n            // Verify current password\n            $storedUser = $this->db->fetchAssoc('SELECT hashedPassword FROM users WHERE id = ?', [$user['id']]);\n            \n            if (!$storedUser['hashedPassword'] || !password_verify($data['currentPassword'], $storedUser['hashedPassword'])) {\n                $response->getBody()->write(json_encode(['message' => 'Current password is incorrect']));\n                return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n            }\n            \n            // Hash new password\n            $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n            $updateData[] = $hashedPassword;\n            $updateFields[] = 'hashedPassword = ?';\n        }\n        \n        // If nothing to update\n        if (empty($updateFields)) {\n            $response->getBody()->write(json_encode(['message' => 'No changes to update']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Update timestamp\n        $updateData[] = date('Y-m-d H:i:s');\n        $updateFields[] = 'updatedAt = ?';\n        \n        // Add user ID for WHERE clause\n        $updateData[] = $user['id'];\n        \n        // Construct and execute update query\n        $query = 'UPDATE users SET ' . implode(', ', $updateFields) . ' WHERE id = ?';\n        $this->db->executeQuery($query, $updateData);\n        \n        // Get updated user data\n        $updatedUser = $this->db->fetchAssoc('SELECT id, name, email, role, image, createdAt, updatedAt FROM users WHERE id = ?', [$user['id']]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $updatedUser['id'],\n            'entityTitle' => $updatedUser['email'],\n            'entity' => 'USER',\n            'action' => 'UPDATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['user' => $updatedUser]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\n<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass CardController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getById(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n\n        $card = $this->db->fetchAssoc('\n            SELECT c.*, l.title as listTitle, l.boardId \n            FROM cards c \n            JOIN lists l ON c.listId = l.id \n            WHERE c.id = ?\n        ', [$id]);\n\n        if (!$card) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        $response->getBody()->write(json_encode(['card' => $card]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function create(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        // Validate required fields\n        if (!isset($data['title']) || !isset($data['listId']) || !isset($data['boardId'])) {\n            $response->getBody()->write(json_encode(['message' => 'Title, listId and boardId are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify list exists and belongs to the board\n        $list = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ? AND boardId = ?', [$data['listId'], $data['boardId']]);\n        if (!$list) {\n            $response->getBody()->write(json_encode(['message' => 'List not found or does not belong to the board']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the highest order in the list to place the new card at the end\n        $lastCard = $this->db->fetchAssoc('SELECT MAX(`order`) as maxOrder FROM cards WHERE listId = ?', [$data['listId']]);\n        $order = $lastCard['maxOrder'] !== null ? $lastCard['maxOrder'] + 1 : 0;\n        \n        // Create the card\n        $id = Uuid::uuid4()->toString();\n        $now = date('Y-m-d H:i:s');\n        \n        $this->db->insert('cards', [\n            'id' => $id,\n            'title' => $data['title'],\n            'description' => $data['description'] ?? null,\n            'order' => $order,\n            'listId' => $data['listId'],\n            'completed' => 0,\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        $card = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $data['title'],\n            'entity' => 'CARD',\n            'action' => 'CREATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $data['boardId'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['card' => $card]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function update(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        // Get card before update for audit log\n        $cardBefore = $this->db->fetchAssoc('\n            SELECT c.*, l.boardId \n            FROM cards c \n            JOIN lists l ON c.listId = l.id \n            WHERE c.id = ?\n        ', [$id]);\n        \n        if (!$cardBefore) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify board ID if provided\n        if (isset($data['boardId']) && $cardBefore['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'Card does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Fields that can be updated\n        $allowedFields = ['title', 'description', 'completed'];\n        $updateData = [];\n        $updateFields = [];\n        \n        foreach ($allowedFields as $field) {\n            if (array_key_exists($field, $data)) {\n                $updateData[] = $data[$field];\n                $updateFields[] = \"$field = ?\";\n            }\n        }\n        \n        if (empty($updateFields)) {\n            $response->getBody()->write(json_encode(['message' => 'No fields to update']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Add updated timestamp\n        $updateData[] = date('Y-m-d H:i:s');\n        $updateFields[] = \"updatedAt = ?\";\n        \n        // Add ID for WHERE clause\n        $updateData[] = $id;\n        \n        // Construct and execute update query\n        $query = 'UPDATE cards SET ' . implode(', ', $updateFields) . ' WHERE id = ?';\n        $this->db->executeQuery($query, $updateData);\n        \n        // Get updated card\n        $card = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$id]);\n        \n        // Determine what field changed for audit log\n        $fieldName = \"\";\n        $valueBefore = null;\n        $valueAfter = null;\n        \n        if (isset($data['title']) && $data['title'] !== $cardBefore['title']) {\n            $fieldName = \"title\";\n            $valueBefore = $cardBefore['title'];\n            $valueAfter = $data['title'];\n        } elseif (isset($data['description']) && $data['description'] !== $cardBefore['description']) {\n            $fieldName = \"description\";\n            $valueBefore = $cardBefore['description'];\n            $valueAfter = $data['description'];\n        } elseif (isset($data['completed'])) {\n            $wasCompleted = $cardBefore['completed'] ? true : false;\n            $isNowCompleted = $data['completed'] ? true : false;\n            \n            if ($wasCompleted !== $isNowCompleted) {\n                $fieldName = \"status\";\n                $valueBefore = $wasCompleted ? \"completed\" : \"incomplete\";\n                $valueAfter = $isNowCompleted ? \"completed\" : \"incomplete\";\n            }\n        }\n        \n        // Create audit log if anything changed\n        if ($fieldName) {\n            $this->auditLogService->create([\n                'entityId' => $id,\n                'entityTitle' => $card['title'],\n                'entity' => 'CARD',\n                'action' => $fieldName === \"status\" && isset($data['completed']) && $data['completed'] ? 'COMPLETED' : 'UPDATE',\n                'userId' => $user['id'],\n                'userName' => $user['name'],\n                'userEmail' => $user['email'],\n                'boardId' => $cardBefore['boardId'],\n                'valueBefore' => $valueBefore,\n                'valueAfter' => $valueAfter,\n            ]);\n        }\n        \n        $response->getBody()->write(json_encode(['card' => $card]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function delete(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n        $data = $request->getParsedBody();\n        \n        // Get card and board info before deleting\n        $card = $this->db->fetchAssoc('\n            SELECT c.*, l.boardId \n            FROM cards c \n            JOIN lists l ON c.listId = l.id \n            WHERE c.id = ?\n        ', [$id]);\n        \n        if (!$card) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify board ID if provided\n        if (isset($data['boardId']) && $card['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'Card does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Create audit log before deletion\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $card['title'],\n            'entity' => 'CARD',\n            'action' => 'DELETE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $card['boardId'],\n        ]);\n        \n        // Delete the card\n        $this->db->delete('cards', ['id' => $id]);\n        \n        $response->getBody()->write(json_encode(['card' => $card]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function copy(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n        $data = $request->getParsedBody();\n        \n        // Get the card to copy\n        $cardToCopy = $this->db->fetchAssoc('\n            SELECT c.*, l.boardId \n            FROM cards c \n            JOIN lists l ON c.listId = l.id \n            WHERE c.id = ?\n        ', [$id]);\n        \n        if (!$cardToCopy) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify board ID if provided\n        if (isset($data['boardId']) && $cardToCopy['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'Card does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the highest order in the list\n        $lastCard = $this->db->fetchAssoc('SELECT MAX(`order`) as maxOrder FROM cards WHERE listId = ?', [$cardToCopy['listId']]);\n        $order = $lastCard['maxOrder'] !== null ? $lastCard['maxOrder'] + 1 : 0;\n        \n        // Create the copy\n        $newId = Uuid::uuid4()->toString();\n        $now = date('Y-m-d H:i:s');\n        \n        $this->db->insert('cards', [\n            'id' => $newId,\n            'title' => $cardToCopy['title'] . ' - Copy',\n            'description' => $cardToCopy['description'],\n            'order' => $order,\n            'listId' => $cardToCopy['listId'],\n            'completed' => $cardToCopy['completed'],\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        $copiedCard = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$newId]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $newId,\n            'entityTitle' => $copiedCard['title'],\n            'entity' => 'CARD',\n            'action' => 'CREATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $cardToCopy['boardId'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['card' => $copiedCard]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function updateOrder(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        \n        if (!isset($data['items']) || !is_array($data['items']) || !isset($data['boardId'])) {\n            $response->getBody()->write(json_encode(['message' => 'Items array and boardId are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Begin transaction\n        $this->db->beginTransaction();\n        \n        try {\n            $updatedCards = [];\n            \n            foreach ($data['items'] as $item) {\n                if (!isset($item['id']) || !isset($item['order']) || !isset($item['listId'])) {\n                    throw new \\Exception('Each item must have id, order, and listId');\n                }\n                \n                // Update the card order and listId\n                $this->db->update('cards', \n                    ['order' => $item['order'], 'listId' => $item['listId']], \n                    ['id' => $item['id']]\n                );\n                \n                // Get the updated card\n                $card = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$item['id']]);\n                $updatedCards[] = $card;\n            }\n            \n            $this->db->commit();\n            \n            $response->getBody()->write(json_encode(['cards' => $updatedCards]));\n            return $response->withHeader('Content-Type', 'application/json');\n        } catch (\\Exception $e) {\n            $this->db->rollBack();\n            $response->getBody()->write(json_encode(['message' => $e->getMessage()]));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n    }\n\n    public function move(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        if (!isset($data['listId']) || !isset($data['boardId'])) {\n            $response->getBody()->write(json_encode(['message' => 'ListId and boardId are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the card to move\n        $cardToMove = $this->db->fetchAssoc('\n            SELECT c.*, l.boardId, l.title as listTitle\n            FROM cards c \n            JOIN lists l ON c.listId = l.id \n            WHERE c.id = ?\n        ', [$id]);\n        \n        if (!$cardToMove) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify the card belongs to the specified board\n        if ($cardToMove['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'Card does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // If moving to the same list, don't do anything\n        if ($cardToMove['listId'] === $data['listId']) {\n            $response->getBody()->write(json_encode(['card' => $cardToMove]));\n            return $response->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Check if the destination list exists and belongs to the board\n        $destList = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ? AND boardId = ?', [$data['listId'], $data['boardId']]);\n        if (!$destList) {\n            $response->getBody()->write(json_encode(['message' => 'Destination list not found or does not belong to the board']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the highest order in the destination list\n        $lastCard = $this->db->fetchAssoc('SELECT MAX(`order`) as maxOrder FROM cards WHERE listId = ?', [$data['listId']]);\n        $order = $lastCard['maxOrder'] !== null ? $lastCard['maxOrder'] + 1 : 0;\n        \n        // Update the card\n        $this->db->update('cards', \n            ['listId' => $data['listId'], 'order' => $order], \n            ['id' => $id]\n        );\n        \n        // Get the updated card\n        $updatedCard = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $updatedCard['title'],\n            'entity' => 'CARD',\n            'action' => 'UPDATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $data['boardId'],\n            'valueBefore' => 'List: ' . $cardToMove['listTitle'],\n            'valueAfter' => 'List: ' . $destList['title'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['card' => $updatedCard]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n\u0005End File\u0006<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass AuditLogController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getAll(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        \n        // Extract query parameters\n        $queryParams = $request->getQueryParams();\n        $entity = $queryParams['entity'] ?? null;\n        $entityId = $queryParams['entityId'] ?? null;\n        $action = $queryParams['action'] ?? null;\n        $limit = isset($queryParams['limit']) ? (int)$queryParams['limit'] : 100;\n        $page = isset($queryParams['page']) ? (int)$queryParams['page'] : 1;\n        $offset = ($page - 1) * $limit;\n        \n        // Build query conditions\n        $conditions = [];\n        $params = [];\n        \n        if ($entity) {\n            $conditions[] = \"entity = ?\";\n            $params[] = $entity;\n        }\n        \n        if ($entityId) {\n            $conditions[] = \"entityId = ?\";\n            $params[] = $entityId;\n        }\n        \n        if ($action) {\n            $conditions[] = \"action = ?\";\n            $params[] = $action;\n        }\n        \n        // Build the full query\n        $whereClause = !empty($conditions) ? \"WHERE \" . implode(\" AND \", $conditions) : \"\";\n        $query = \"SELECT * FROM auditLogs $whereClause ORDER BY createdAt DESC LIMIT ? OFFSET ?\";\n        \n        // Add pagination params\n        $params[] = $limit;\n        $params[] = $offset;\n        \n        // Execute query\n        $logs = $this->db->fetchAll($query, $params);\n        \n        // Count total records for pagination\n        $countQuery = \"SELECT COUNT(*) as total FROM auditLogs $whereClause\";\n        $countParams = array_slice($params, 0, -2); // Remove limit and offset\n        $totalCount = $this->db->fetchAssoc($countQuery, $countParams)['total'];\n        \n        $response->getBody()->write(json_encode([\n            'logs' => $logs,\n            'pagination' => [\n                'total' => (int)$totalCount,\n                'page' => $page,\n                'limit' => $limit,\n                'pages' => ceil($totalCount / $limit)\n            ]\n        ]));\n        \n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getBoardLogs(Request $request, Response $response, array $args): Response\n    {\n        $boardId = $args['id'];\n        $user = $request->getAttribute('user');\n        \n        // Extract query parameters\n        $queryParams = $request->getQueryParams();\n        $limit = isset($queryParams['limit']) ? (int)$queryParams['limit'] : 100;\n        $page = isset($queryParams['page']) ? (int)$queryParams['page'] : 1;\n        $offset = ($page - 1) * $limit;\n        \n        // Check if board exists\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$boardId]);\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get logs related to the board\n        $logs = $this->db->fetchAll('\n            SELECT * FROM auditLogs \n            WHERE boardId = ? OR (entity = \"BOARD\" AND entityId = ?) \n            ORDER BY createdAt DESC \n            LIMIT ? OFFSET ?\n        ', [$boardId, $boardId, $limit, $offset]);\n        \n        // Count total records\n        $totalCount = $this->db->fetchAssoc('\n            SELECT COUNT(*) as total FROM auditLogs \n            WHERE boardId = ? OR (entity = \"BOARD\" AND entityId = ?)\n        ', [$boardId, $boardId])['total'];\n        \n        $response->getBody()->write(json_encode([\n            'logs' => $logs,\n            'pagination' => [\n                'total' => (int)$totalCount,\n                'page' => $page,\n                'limit' => $limit,\n                'pages' => ceil($totalCount / $limit)\n            ]\n        ]));\n        \n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getCardLogs(Request $request, Response $response, array $args): Response\n    {\n        $cardId = $args['id'];\n        $user = $request->getAttribute('user');\n        \n        // Check if card exists\n        $card = $this->db->fetchAssoc('SELECT * FROM cards WHERE id = ?', [$cardId]);\n        if (!$card) {\n            $response->getBody()->write(json_encode(['message' => 'Card not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get logs related to the card\n        $logs = $this->db->fetchAll('\n            SELECT * FROM auditLogs \n            WHERE entity = \"CARD\" AND entityId = ?\n            ORDER BY createdAt DESC\n        ', [$cardId]);\n        \n        $response->getBody()->write(json_encode(['logs' => $logs]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\n<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass AdminController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getAllUsers(Request $request, Response $response, array $args): Response\n    {\n        $users = $this->db->fetchAll('SELECT id, name, email, image, role, createdAt, updatedAt FROM users ORDER BY createdAt DESC');\n        $response->getBody()->write(json_encode(['users' => $users]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getUserById(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $this->db->fetchAssoc('SELECT id, name, email, image, role, createdAt, updatedAt FROM users WHERE id = ?', [$id]);\n\n        if (!$user) {\n            $response->getBody()->write(json_encode(['message' => 'User not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        $response->getBody()->write(json_encode(['user' => $user]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function createUser(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        $admin = $request->getAttribute('user');\n        \n        // Validate required fields\n        if (!isset($data['email']) || !isset($data['password'])) {\n            $response->getBody()->write(json_encode(['message' => 'Email and password are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Check if email already exists\n        $existingUser = $this->db->fetchAssoc('SELECT id FROM users WHERE email = ?', [$data['email']]);\n        if ($existingUser) {\n            $response->getBody()->write(json_encode(['message' => 'Email already in use']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Create the user\n        $id = Uuid::uuid4()->toString();\n        $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n        $role = isset($data['role']) && in_array($data['role'], ['admin', 'user']) ? $data['role'] : 'user';\n        $now = date('Y-m-d H:i:s');\n        \n        $this->db->insert('users', [\n            'id' => $id,\n            'name' => $data['name'] ?? null,\n            'email' => $data['email'],\n            'hashedPassword' => $hashedPassword,\n            'role' => $role,\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        $user = $this->db->fetchAssoc('SELECT id, name, email, role, createdAt, updatedAt FROM users WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $data['email'],\n            'entity' => 'USER',\n            'action' => 'CREATE',\n            'userId' => $admin['id'],\n            'userName' => $admin['name'],\n            'userEmail' => $admin['email'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['user' => $user]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function updateUser(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $admin = $request->getAttribute('user');\n        \n        // Check if user exists\n        $user = $this->db->fetchAssoc('SELECT * FROM users WHERE id = ?', [$id]);\n        if (!$user) {\n            $response->getBody()->write(json_encode(['message' => 'User not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Fields that can be updated\n        $allowedFields = ['name', 'email', 'role', 'password'];\n        $updateData = [];\n        $updateFields = [];\n        \n        // Check if email already exists if trying to update it\n        if (isset($data['email']) && $data['email'] !== $user['email']) {\n            $existingUser = $this->db->fetchAssoc('SELECT id FROM users WHERE email = ? AND id != ?', [$data['email'], $id]);\n            if ($existingUser) {\n                $response->getBody()->write(json_encode(['message' => 'Email already in use']));\n                return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n            }\n            \n            $updateData[] = $data['email'];\n            $updateFields[] = 'email = ?';\n        }\n        \n        // Update name if provided\n        if (isset($data['name'])) {\n            $updateData[] = $data['name'];\n            $updateFields[] = 'name = ?';\n        }\n        \n        // Update role if provided\n        if (isset($data['role']) && in_array($data['role'], ['admin', 'user'])) {\n            $updateData[] = $data['role'];\n            $updateFields[] = 'role = ?';\n        }\n        \n        // Update password if provided\n        if (isset($data['password']) && strlen($data['password']) >= 8) {\n            $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n            $updateData[] = $hashedPassword;\n            $updateFields[] = 'hashedPassword = ?';\n        }\n        \n        // If nothing to update\n        if (empty($updateFields)) {\n            $response->getBody()->write(json_encode(['message' => 'No changes to update']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Update timestamp\n        $updateData[] = date('Y-m-d H:i:s');\n        $updateFields[] = 'updatedAt = ?';\n        \n        // Add user ID for WHERE clause\n        $updateData[] = $id;\n        \n        // Construct and execute update query\n        $query = 'UPDATE users SET ' . implode(', ', $updateFields) . ' WHERE id = ?';\n        $this->db->executeQuery($query, $updateData);\n        \n        // Get updated user data\n        $updatedUser = $this->db->fetchAssoc('SELECT id, name, email, role, createdAt, updatedAt FROM users WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $updatedUser['email'],\n            'entity' => 'USER',\n            'action' => 'UPDATE',\n            'userId' => $admin['id'],\n            'userName' => $admin['name'],\n            'userEmail' => $admin['email'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['user' => $updatedUser]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function updateUserRole(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $admin = $request->getAttribute('user');\n        \n        // Validate input\n        if (!isset($data['role']) || !in_array($data['role'], ['admin', 'user'])) {\n            $response->getBody()->write(json_encode(['message' => 'Valid role is required (admin or user)']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Check if user exists\n        $user = $this->db->fetchAssoc('SELECT * FROM users WHERE id = ?', [$id]);\n        if (!$user) {\n            $response->getBody()->write(json_encode(['message' => 'User not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Update role\n        $this->db->update('users', [\n            'role' => $data['role'],\n            'updatedAt' => date('Y-m-d H:i:s')\n        ], ['id' => $id]);\n        \n        // Get updated user\n        $updatedUser = $this->db->fetchAssoc('SELECT id, name, email, role, createdAt, updatedAt FROM users WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $updatedUser['email'],\n            'entity' => 'USER',\n            'action' => 'UPDATE',\n            'userId' => $admin['id'],\n            'userName' => $admin['name'],\n            'userEmail' => $admin['email'],\n            'valueBefore' => $user['role'],\n            'valueAfter' => $data['role'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['user' => $updatedUser]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function deleteUser(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $admin = $request->getAttribute('user');\n        \n        // Check if user exists\n        $user = $this->db->fetchAssoc('SELECT * FROM users WHERE id = ?', [$id]);\n        if (!$user) {\n            $response->getBody()->write(json_encode(['message' => 'User not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Check if trying to delete yourself\n        if ($id === $admin['id']) {\n            $response->getBody()->write(json_encode(['message' => 'Cannot delete your own account']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Create audit log before deleting\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $user['email'],\n            'entity' => 'USER',\n            'action' => 'DELETE',\n            'userId' => $admin['id'],\n            'userName' => $admin['name'],\n            'userEmail' => $admin['email'],\n        ]);\n        \n        // Delete the user\n        $this->db->delete('users', ['id' => $id]);\n        \n        $response->getBody()->write(json_encode(['message' => 'User deleted successfully']));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getSystemMetrics(Request $request, Response $response, array $args): Response\n    {\n        // Count users\n        $totalUsers = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM users')['count'];\n        $adminUsers = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM users WHERE role = \"admin\"')['count'];\n        \n        // Count boards\n        $totalBoards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM boards')['count'];\n        \n        // Count lists and cards\n        $totalLists = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM lists')['count'];\n        $totalCards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM cards')['count'];\n        $completedCards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM cards WHERE completed = 1')['count'];\n        \n        // Recent activity\n        $recentLogs = $this->db->fetchAll('SELECT * FROM auditLogs ORDER BY createdAt DESC LIMIT 10');\n        \n        // Get registration trend (users per month for the last 6 months)\n        $sixMonthsAgo = date('Y-m-d', strtotime('-6 months'));\n        $userTrend = $this->db->fetchAll('\n            SELECT \n                DATE_FORMAT(createdAt, \"%Y-%m\") as month,\n                COUNT(*) as count\n            FROM users\n            WHERE createdAt >= ?\n            GROUP BY DATE_FORMAT(createdAt, \"%Y-%m\")\n            ORDER BY month\n        ', [$sixMonthsAgo]);\n        \n        // Get activity trend (audit logs per day for the last 30 days)\n        $thirtyDaysAgo = date('Y-m-d', strtotime('-30 days'));\n        $activityTrend = $this->db->fetchAll('\n            SELECT \n                DATE(createdAt) as date,\n                COUNT(*) as count\n            FROM auditLogs\n            WHERE createdAt >= ?\n            GROUP BY DATE(createdAt)\n            ORDER BY date\n        ', [$thirtyDaysAgo]);\n        \n        $metrics = [\n            'users' => [\n                'total' => (int)$totalUsers,\n                'admin' => (int)$adminUsers,\n                'regular' => (int)$totalUsers - (int)$adminUsers,\n                'trend' => $userTrend\n            ],\n            'boards' => [\n                'total' => (int)$totalBoards\n            ],\n            'lists' => [\n                'total' => (int)$totalLists\n            ],\n            'cards' => [\n                'total' => (int)$totalCards,\n                'completed' => (int)$completedCards,\n                'completion_rate' => $totalCards > 0 ? round(($completedCards / $totalCards) * 100, 2) : 0\n            ],\n            'activity' => [\n                'recent' => $recentLogs,\n                'trend' => $activityTrend\n            ]\n        ];\n        \n        $response->getBody()->write(json_encode(['metrics' => $metrics]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n\u0005End File\u0006<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\n\nclass MetricsController\n{\n    private $container;\n    private $db;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n    }\n\n    public function getBoardMetrics(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        \n        // Get total board count\n        $totalBoards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM boards')['count'];\n        \n        // Get boards by visibility\n        $publicBoards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM boards WHERE visibility = \"public\"')['count'];\n        $privateBoards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM boards WHERE visibility = \"private\"')['count'];\n        \n        // Get recently created boards (last 30 days)\n        $thirtyDaysAgo = date('Y-m-d', strtotime('-30 days'));\n        $recentBoards = $this->db->fetchAssoc('\n            SELECT COUNT(*) as count FROM boards \n            WHERE createdAt >= ?\n        ', [$thirtyDaysAgo])['count'];\n        \n        // Get boards with most lists\n        $boardsWithMostLists = $this->db->fetchAll('\n            SELECT b.id, b.title, COUNT(l.id) as listCount\n            FROM boards b\n            LEFT JOIN lists l ON b.id = l.boardId\n            GROUP BY b.id\n            ORDER BY listCount DESC\n            LIMIT 5\n        ');\n        \n        // Get boards with most cards (through lists)\n        $boardsWithMostCards = $this->db->fetchAll('\n            SELECT b.id, b.title, COUNT(c.id) as cardCount\n            FROM boards b\n            LEFT JOIN lists l ON b.id = l.boardId\n            LEFT JOIN cards c ON l.id = c.listId\n            GROUP BY b.id\n            ORDER BY cardCount DESC\n            LIMIT 5\n        ');\n        \n        $response->getBody()->write(json_encode([\n            'totalBoards' => (int)$totalBoards,\n            'publicBoards' => (int)$publicBoards,\n            'privateBoards' => (int)$privateBoards,\n            'recentBoards' => (int)$recentBoards,\n            'boardsWithMostLists' => $boardsWithMostLists,\n            'boardsWithMostCards' => $boardsWithMostCards\n        ]));\n        \n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getListMetrics(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        \n        // Get total list count\n        $totalLists = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM lists')['count'];\n        \n        // Get count of boards that have lists\n        $boardsWithLists = $this->db->fetchAssoc('\n            SELECT COUNT(DISTINCT boardId) as count \n            FROM lists\n        ')['count'];\n        \n        // Get average lists per board\n        $avgListsPerBoard = $boardsWithLists > 0 ? $totalLists / $boardsWithLists : 0;\n        \n        // Get lists with most cards\n        $listsWithMostCards = $this->db->fetchAll('\n            SELECT l.id, l.title, b.title as boardTitle, COUNT(c.id) as cardCount\n            FROM lists l\n            JOIN boards b ON l.boardId = b.id\n            LEFT JOIN cards c ON l.id = c.listId\n            GROUP BY l.id\n            ORDER BY cardCount DESC\n            LIMIT 10\n        ');\n        \n        // Get recently created lists (last 30 days)\n        $thirtyDaysAgo = date('Y-m-d', strtotime('-30 days'));\n        $recentLists = $this->db->fetchAssoc('\n            SELECT COUNT(*) as count FROM lists \n            WHERE createdAt >= ?\n        ', [$thirtyDaysAgo])['count'];\n        \n        $response->getBody()->write(json_encode([\n            'totalLists' => (int)$totalLists,\n            'boardsWithLists' => (int)$boardsWithLists,\n            'avgListsPerBoard' => round($avgListsPerBoard, 2),\n            'recentLists' => (int)$recentLists,\n            'listsWithMostCards' => $listsWithMostCards\n        ]));\n        \n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getCardMetrics(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        \n        // Get total card count\n        $totalCards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM cards')['count'];\n        \n        // Get completed cards count\n        $completedCards = $this->db->fetchAssoc('SELECT COUNT(*) as count FROM cards WHERE completed = 1')['count'];\n        \n        // Get cards created in the last 30 days\n        $thirtyDaysAgo = date('Y-m-d', strtotime('-30 days'));\n        $recentCards = $this->db->fetchAssoc('\n            SELECT COUNT(*) as count FROM cards \n            WHERE createdAt >= ?\n        ', [$thirtyDaysAgo])['count'];\n        \n        // Get cards by status (completed vs not completed)\n        $incompleteCards = $totalCards - $completedCards;\n        \n        // Get boards with most cards\n        $boardsWithMostCards = $this->db->fetchAll('\n            SELECT b.id, b.title, COUNT(c.id) as cardCount\n            FROM boards b\n            JOIN lists l ON b.id = l.boardId\n            JOIN cards c ON l.id = c.listId\n            GROUP BY b.id\n            ORDER BY cardCount DESC\n            LIMIT 5\n        ');\n        \n        // Get distribution of cards across lists\n        $listsWithCardCounts = $this->db->fetchAll('\n            SELECT l.id, l.title, COUNT(c.id) as cardCount\n            FROM lists l\n            LEFT JOIN cards c ON l.id = c.listId\n            GROUP BY l.id\n            ORDER BY cardCount DESC\n            LIMIT 10\n        ');\n        \n        $response->getBody()->write(json_encode([\n            'totalCards' => (int)$totalCards,\n            'completedCards' => (int)$completedCards,\n            'incompleteCards' => (int)$incompleteCards,\n            'recentCards' => (int)$recentCards,\n            'boardsWithMostCards' => $boardsWithMostCards,\n            'listsWithCardCounts' => $listsWithCardCounts\n        ]));\n        \n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n\u0005End File\u0006<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass ListController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getByBoardId(Request $request, Response $response, array $args): Response\n    {\n        $boardId = $args['boardId'];\n        $user = $request->getAttribute('user');\n\n        // Check if board exists\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$boardId]);\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        // Get lists with ordered cards\n        $lists = $this->db->fetchAll('SELECT * FROM lists WHERE boardId = ? ORDER BY `order`', [$boardId]);\n        \n        // Get all cards for this board's lists in one query for efficiency\n        $cardsByListId = [];\n        if (!empty($lists)) {\n            $listIds = array_column($lists, 'id');\n            $placeholders = implode(',', array_fill(0, count($listIds), '?'));\n            \n            $cards = $this->db->fetchAll(\n                \"SELECT * FROM cards WHERE listId IN ($placeholders) ORDER BY `order`\", \n                $listIds\n            );\n            \n            // Group cards by listId\n            foreach ($cards as $card) {\n                $cardsByListId[$card['listId']][] = $card;\n            }\n        }\n        \n        // Add cards to each list\n        foreach ($lists as &$list) {\n            $list['cards'] = $cardsByListId[$list['id']] ?? [];\n        }\n\n        $response->getBody()->write(json_encode(['lists' => $lists]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function create(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        // Validate required fields\n        if (!isset($data['title']) || !isset($data['boardId'])) {\n            $response->getBody()->write(json_encode(['message' => 'Title and boardId are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Check if board exists\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$data['boardId']]);\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the highest order in the board to place the new list at the end\n        $lastList = $this->db->fetchAssoc('SELECT MAX(`order`) as maxOrder FROM lists WHERE boardId = ?', [$data['boardId']]);\n        $order = $lastList['maxOrder'] !== null ? $lastList['maxOrder'] + 1 : 0;\n        \n        // Create the list\n        $id = Uuid::uuid4()->toString();\n        $now = date('Y-m-d H:i:s');\n        \n        $this->db->insert('lists', [\n            'id' => $id,\n            'title' => $data['title'],\n            'order' => $order,\n            'boardId' => $data['boardId'],\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        $list = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $data['title'],\n            'entity' => 'LIST',\n            'action' => 'CREATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $data['boardId'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['list' => $list]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function update(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        // Get list before update for audit log\n        $listBefore = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$id]);\n        \n        if (!$listBefore) {\n            $response->getBody()->write(json_encode(['message' => 'List not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify board ID if provided\n        if (isset($data['boardId']) && $listBefore['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'List does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Update the list title\n        if (!isset($data['title'])) {\n            $response->getBody()->write(json_encode(['message' => 'Title is required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        $this->db->update('lists', [\n            'title' => $data['title'],\n            'updatedAt' => date('Y-m-d H:i:s')\n        ], ['id' => $id]);\n        \n        $list = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$id]);\n        \n        // Create audit log only if title has changed\n        if ($listBefore['title'] !== $data['title']) {\n            $this->auditLogService->create([\n                'entityId' => $id,\n                'entityTitle' => $list['title'],\n                'entity' => 'LIST',\n                'action' => 'UPDATE',\n                'userId' => $user['id'],\n                'userName' => $user['name'],\n                'userEmail' => $user['email'],\n                'boardId' => $list['boardId'],\n                'valueBefore' => $listBefore['title'],\n                'valueAfter' => $list['title'],\n            ]);\n        }\n        \n        $response->getBody()->write(json_encode(['list' => $list]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function delete(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n        \n        // Get the list to delete\n        $list = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$id]);\n        \n        if (!$list) {\n            $response->getBody()->write(json_encode(['message' => 'List not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Create audit log before deletion\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $list['title'],\n            'entity' => 'LIST',\n            'action' => 'DELETE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $list['boardId'],\n        ]);\n        \n        // Delete all cards in the list\n        $this->db->delete('cards', ['listId' => $id]);\n        \n        // Delete the list\n        $this->db->delete('lists', ['id' => $id]);\n        \n        $response->getBody()->write(json_encode(['list' => $list]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function copy(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        // Get the list to copy\n        $listToCopy = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$id]);\n        \n        if (!$listToCopy) {\n            $response->getBody()->write(json_encode(['message' => 'List not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Verify board ID if provided\n        if (isset($data['boardId']) && $listToCopy['boardId'] !== $data['boardId']) {\n            $response->getBody()->write(json_encode(['message' => 'List does not belong to the specified board']));\n            return $response->withStatus(403)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Get the highest order in the board\n        $lastList = $this->db->fetchAssoc('SELECT MAX(`order`) as maxOrder FROM lists WHERE boardId = ?', [$listToCopy['boardId']]);\n        $order = $lastList['maxOrder'] !== null ? $lastList['maxOrder'] + 1 : 0;\n        \n        // Create the copied list\n        $newId = Uuid::uuid4()->toString();\n        $now = date('Y-m-d H:i:s');\n        \n        $this->db->insert('lists', [\n            'id' => $newId,\n            'title' => $listToCopy['title'] . ' - Copy',\n            'order' => $order,\n            'boardId' => $listToCopy['boardId'],\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        // Copy all cards from the original list\n        $cards = $this->db->fetchAll('SELECT * FROM cards WHERE listId = ? ORDER BY `order`', [$id]);\n        \n        foreach ($cards as $index => $card) {\n            $newCardId = Uuid::uuid4()->toString();\n            \n            $this->db->insert('cards', [\n                'id' => $newCardId,\n                'title' => $card['title'],\n                'description' => $card['description'],\n                'order' => $index,\n                'listId' => $newId,\n                'completed' => $card['completed'],\n                'createdAt' => $now,\n                'updatedAt' => $now,\n            ]);\n        }\n        \n        // Get the copied list with its cards\n        $copiedList = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$newId]);\n        $copiedCards = $this->db->fetchAll('SELECT * FROM cards WHERE listId = ? ORDER BY `order`', [$newId]);\n        $copiedList['cards'] = $copiedCards;\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $newId,\n            'entityTitle' => $copiedList['title'],\n            'entity' => 'LIST',\n            'action' => 'CREATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n            'boardId' => $listToCopy['boardId'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['list' => $copiedList]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function updateOrder(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        \n        if (!isset($data['items']) || !is_array($data['items']) || !isset($data['boardId'])) {\n            $response->getBody()->write(json_encode(['message' => 'Items array and boardId are required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        // Begin transaction\n        $this->db->beginTransaction();\n        \n        try {\n            $updatedLists = [];\n            \n            foreach ($data['items'] as $item) {\n                if (!isset($item['id']) || !isset($item['order'])) {\n                    throw new \\Exception('Each item must have id and order');\n                }\n                \n                // Verify the list belongs to the specified board\n                $list = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ? AND boardId = ?', [$item['id'], $data['boardId']]);\n                if (!$list) {\n                    throw new \\Exception('List not found or does not belong to the board');\n                }\n                \n                // Update the list order\n                $this->db->update('lists', ['order' => $item['order']], ['id' => $item['id']]);\n                \n                // Get the updated list\n                $updatedList = $this->db->fetchAssoc('SELECT * FROM lists WHERE id = ?', [$item['id']]);\n                $updatedLists[] = $updatedList;\n            }\n            \n            $this->db->commit();\n            \n            $response->getBody()->write(json_encode(['lists' => $updatedLists]));\n            return $response->withHeader('Content-Type', 'application/json');\n        } catch (\\Exception $e) {\n            $this->db->rollBack();\n            $response->getBody()->write(json_encode(['message' => $e->getMessage()]));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n    }\n}\n\u0005End File\u0006# Chrisley304/trello-clone\n# backend/src/Controller/BoardController.php\n<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Container\\ContainerInterface;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Service\\AuditLogService;\n\nclass BoardController\n{\n    private $container;\n    private $db;\n    private $auditLogService;\n\n    public function __construct(ContainerInterface $container)\n    {\n        $this->container = $container;\n        $this->db = $container->get('database');\n        $this->auditLogService = new AuditLogService($this->db);\n    }\n\n    public function getAll(Request $request, Response $response, array $args): Response\n    {\n        $user = $request->getAttribute('user');\n        \n        // Extract query parameters\n        $queryParams = $request->getQueryParams();\n        $visibility = $queryParams['visibility'] ?? null;\n        $limit = isset($queryParams['limit']) ? (int)$queryParams['limit'] : null;\n        $page = isset($queryParams['page']) ? (int)$queryParams['page'] : null;\n        \n        // Build query conditions\n        $conditions = [];\n        $params = [];\n        \n        if ($visibility && in_array($visibility, ['public', 'private'])) {\n            $conditions[] = \"visibility = ?\";\n            $params[] = $visibility;\n        }\n        \n        // Build the full query\n        $whereClause = !empty($conditions) ? \"WHERE \" . implode(\" AND \", $conditions) : \"\";\n        $orderClause = \"ORDER BY createdAt DESC\";\n        $limitClause = \"\";\n        \n        if ($limit) {\n            $limitClause = \"LIMIT ?\";\n            $params[] = $limit;\n            \n            if ($page) {\n                $offset = ($page - 1) * $limit;\n                $limitClause .= \" OFFSET ?\";\n                $params[] = $offset;\n            }\n        }\n        \n        $query = \"SELECT * FROM boards $whereClause $orderClause $limitClause\";\n        $boards = $this->db->fetchAll($query, $params);\n        \n        $response->getBody()->write(json_encode(['boards' => $boards]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function getById(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$id]);\n\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        $response->getBody()->write(json_encode(['board' => $board]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function create(Request $request, Response $response, array $args): Response\n    {\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n        \n        if (!isset($data['title'])) {\n            $response->getBody()->write(json_encode(['message' => 'Title is required']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n        \n        $id = Uuid::uuid4()->toString();\n        $visibility = isset($data['visibility']) && $data['visibility'] === 'public' ? 'public' : 'private';\n        $now = date('Y-m-d H:i:s');\n        \n        // Extract image details if provided\n        $imageId = null;\n        $imageThumbUrl = null;\n        $imageFullUrl = null;\n        $imageLinkHTML = null;\n        $imageUserName = null;\n        \n        if (isset($data['image']) && !empty($data['image'])) {\n            $imageParts = explode('|', $data['image']);\n            if (count($imageParts) >= 5) {\n                $imageId = $imageParts[0];\n                $imageThumbUrl = $imageParts[1];\n                $imageFullUrl = $imageParts[2];\n                $imageLinkHTML = $imageParts[3];\n                $imageUserName = $imageParts[4];\n            }\n        }\n        \n        // Create the board\n        $this->db->insert('boards', [\n            'id' => $id,\n            'title' => $data['title'],\n            'visibility' => $visibility,\n            'imageId' => $imageId,\n            'imageThumbUrl' => $imageThumbUrl,\n            'imageFullUrl' => $imageFullUrl,\n            'imageLinkHTML' => $imageLinkHTML,\n            'imageUserName' => $imageUserName,\n            'userId' => $user['id'],\n            'createdAt' => $now,\n            'updatedAt' => $now,\n        ]);\n        \n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$id]);\n        \n        // Create audit log\n        $this->auditLogService->create([\n            'entityId' => $id,\n            'entityTitle' => $data['title'],\n            'entity' => 'BOARD',\n            'action' => 'CREATE',\n            'userId' => $user['id'],\n            'userName' => $user['name'],\n            'userEmail' => $user['email'],\n        ]);\n        \n        $response->getBody()->write(json_encode(['board' => $board]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function update(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $data = $request->getParsedBody();\n        $user = $request->getAttribute('user');\n\n        // Check if board exists\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$id]);\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        // Fields that can be updated\n        $allowedFields = ['title', 'visibility'];\n        $updateData = [];\n        $updateFields = [];\n        $auditLogBefore = [];\n        $auditLogAfter = [];\n\n        foreach ($allowedFields as $field) {\n            if (isset($data[$field])) {\n                if ($field === 'visibility' && !in_array($data[$field], ['public', 'private'])) {\n                    continue; // Skip invalid visibility values\n                }\n\n                // Store before/after values for audit log\n                if ($board[$field] !== $data[$field]) {\n                    $auditLogBefore[$field] = $board[$field];\n                    $auditLogAfter[$field] = $data[$field];\n                }\n\n                $updateData[] = $data[$field];\n                $updateFields[] = \"$field = ?\";\n            }\n        }\n\n        if (empty($updateFields)) {\n            $response->getBody()->write(json_encode(['message' => 'No fields to update']));\n            return $response->withStatus(400)->withHeader('Content-Type', 'application/json');\n        }\n\n        // Add updated timestamp\n        $updateData[] = date('Y-m-d H:i:s');\n        $updateFields[] = \"updatedAt = ?\";\n        \n        // Add ID for WHERE clause\n        $updateData[] = $id;\n\n        // Construct and execute update query\n        $query = 'UPDATE boards SET ' . implode(', ', $updateFields) . ' WHERE id = ?';\n        $this->db->executeQuery($query, $updateData);\n\n        // Get updated board\n        $updatedBoard = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$id]);\n\n        // Create audit log if fields changed\n        if (!empty($auditLogBefore)) {\n            $this->auditLogService->create([\n                'entityId' => $id,\n                'entityTitle' => $updatedBoard['title'],\n                'entity' => 'BOARD',\n                'action' => 'UPDATE',\n                'userId' => $user['id'],\n                'userName' => $user['name'],\n                'userEmail' => $user['email'],\n                'valueBefore' => json_encode($auditLogBefore),\n                'valueAfter' => json_encode($auditLogAfter),\n                'boardId' => $id,\n            ]);\n        }\n\n        $response->getBody()->write(json_encode(['board' => $updatedBoard]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function delete(Request $request, Response $response, array $args): Response\n    {\n        $id = $args['id'];\n        $user = $request->getAttribute('user');\n\n        // Check if board exists\n        $board = $this->db->fetchAssoc('SELECT * FROM boards WHERE id = ?', [$id]);\n        if (!$board) {\n            $response->getBody()->write(json_encode(['message' => 'Board not found']));\n            return $response->withStatus(404)->withHeader('Content-Type', 'application/json');\n        }\n\n        // Begin transaction\n        $this->db->beginTransaction();\n\n        try {\n            // Create audit log before deletion\n            $this->auditLogService->create([\n                'entityId' => $id,\n                'entityTitle' => $board['title'],\n                'entity' => 'BOARD',\n                'action' => 'DELETE',\n                'userId' => $user['id'],\n                'userName' => $user['name'],\n                'userEmail' => $user['email'],\n            ]);\n\n            // Get all lists for this board\n            $lists = $this->db->fetchAll('SELECT id FROM lists WHERE boardId = ?', [$id]);\n            $listIds = array_column($lists, 'id');\n\n            // Delete all cards in all lists",
    "how-to-win-with-automated-product-docume|related_title|2": "Vous voulez créer des guides d'utilisateur informatifs ? Nos 10 meilleurs conseils peuvent vous aider",
    "how-to-win-with-automated-product-docume|related_explanation|2": "Les deux articles traitent de Javascript",
    "how-to-win-with-automated-product-docume|related_title|3": "Solutions Docsie pour les techniciens d'essai dans l'industrie de fabrication des semi-conducteurs",
    "how-to-win-with-automated-product-docume|related_explanation|3": "Les deux articles traitent du flux de travail de documentation",
    "how-to-win-with-automated-product-docume|related_title|4": "10 façons de maîtriser l'ingénierie des prompts pour les rédacteurs techniques",
    "how-to-win-with-automated-product-docume|related_explanation|4": "Les deux articles discutent du flux de travail de la documentation"
}